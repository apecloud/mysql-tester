# Innodb page size 16k required

# Initialise
drop table if exists t1,t2,t3;

SET sql_mode = 'NO_ENGINE_SUBSTITUTION';

#
# Simple test without tables


#
# Test of group (Failed for Lars Hoss <lh@pbm.de>)
#

CREATE TABLE t1 (
  spID int(10) unsigned,
  userID int(10) unsigned,
  score smallint(5) unsigned,
  lsg char(40),
  date date
);

INSERT INTO t1 VALUES (1,1,1,'','0000-00-00');
INSERT INTO t1 VALUES (2,2,2,'','0000-00-00');
INSERT INTO t1 VALUES (2,1,1,'','0000-00-00');
INSERT INTO t1 VALUES (3,3,3,'','0000-00-00');

CREATE TABLE t2 (
  userID int(10) unsigned NOT NULL auto_increment,
  niName char(15),
  passwd char(8),
  mail char(50),
  isAukt enum('N','Y') DEFAULT 'N',
  vName char(30),
  nName char(40),
  adr char(60),
  plz char(5),
  ort char(35),
  land char(20),
  PRIMARY KEY (userID)
);

INSERT INTO t2 VALUES (1,'name','pass','mail','Y','v','n','adr','1','1','1');
INSERT INTO t2 VALUES (2,'name','pass','mail','Y','v','n','adr','1','1','1');
INSERT INTO t2 VALUES (3,'name','pass','mail','Y','v','n','adr','1','1','1');
INSERT INTO t2 VALUES (4,'name','pass','mail','Y','v','n','adr','1','1','1');
INSERT INTO t2 VALUES (5,'name','pass','mail','Y','v','n','adr','1','1','1');

#skip # ANALYZE TABLE t1,t2;

# Tests printing of TemptableAggregateIterator.

SELECT t2.userid, MIN(t1.score) FROM t1, t2 WHERE t1.userID=t2.userID GROUP BY t2.userid;
SELECT t2.userid, MIN(t1.score) FROM t1, t2 WHERE t1.userID=t2.userID GROUP BY t2.userid ORDER BY NULL;
SELECT t2.userid, MIN(t1.score) FROM t1, t2 WHERE t1.userID=t2.userID AND t1.spID=2  GROUP BY t2.userid;
SELECT t2.userid, MIN(t1.score+0.0) FROM t1, t2 WHERE t1.userID=t2.userID AND t1.spID=2  GROUP BY t2.userid;
SELECT t2.userid, MIN(t1.score+0.0) FROM t1, t2 WHERE t1.userID=t2.userID AND t1.spID=2  GROUP BY t2.userid ORDER BY NULL;
 SELECT t2.userid, MIN(t1.score+0.0) FROM t1, t2 WHERE t1.userID=t2.userID AND t1.spID=2  GROUP BY t2.userid ORDER BY NULL;
drop table t1,t2;

#
# Bug in GROUP BY, by Nikki Chumakov <nikki@saddam.cityline.ru>
#

CREATE TABLE t1 (
  PID int(10) unsigned NOT NULL auto_increment,
  payDate date DEFAULT '0000-00-00' NOT NULL,
  recDate datetime DEFAULT '0000-00-00 00:00:00' NOT NULL,
  URID int(10) unsigned DEFAULT '0' NOT NULL,
  CRID int(10) unsigned DEFAULT '0' NOT NULL,
  amount int(10) unsigned DEFAULT '0' NOT NULL,
  operator int(10) unsigned,
  method enum('unknown','cash','dealer','check','card','lazy','delayed','test') DEFAULT 'unknown' NOT NULL,
  DIID int(10) unsigned,
  reason char(1) binary DEFAULT '' NOT NULL,
  code_id int(10) unsigned,
  qty mediumint(8) unsigned DEFAULT '0' NOT NULL,
  PRIMARY KEY (PID),
  KEY URID (URID),
  KEY reason (reason),
  KEY method (method),
  KEY payDate (payDate)
);

INSERT INTO t1 VALUES (1,'1970-01-01','1997-10-17 00:00:00',2529,1,21000,11886,'check',0,'F',16200,6);


drop table t1;

#
# Problem with GROUP BY + ORDER BY when no match
# Tested with locking
#

CREATE TABLE t1 (
  cid mediumint(9) NOT NULL auto_increment,
  firstname varchar(32) DEFAULT '' NOT NULL,
  surname varchar(32) DEFAULT '' NOT NULL,
  PRIMARY KEY (cid)
);
INSERT INTO t1 VALUES (1,'That','Guy');
INSERT INTO t1 VALUES (2,'Another','Gent');

CREATE TABLE t2 (
  call_id mediumint(8) NOT NULL auto_increment,
  contact_id mediumint(8) DEFAULT '0' NOT NULL,
  PRIMARY KEY (call_id),
  KEY contact_id (contact_id)
);

lock tables t1 read,t2 write;

INSERT INTO t2 VALUES (10,2);
INSERT INTO t2 VALUES (18,2);
INSERT INTO t2 VALUES (62,2);
INSERT INTO t2 VALUES (91,2);
INSERT INTO t2 VALUES (92,2);

SELECT cid, CONCAT(firstname, ' ', surname), COUNT(call_id) FROM t1 LEFT JOIN t2 ON cid=contact_id WHERE firstname like '%foo%' GROUP BY cid;
SELECT cid, CONCAT(firstname, ' ', surname), COUNT(call_id) FROM t1 LEFT JOIN t2 ON cid=contact_id WHERE firstname like '%foo%' GROUP BY cid ORDER BY NULL;
#skip SELECT HIGH_PRIORITY cid, CONCAT(firstname, ' ', surname), COUNT(call_id) FROM t1 LEFT JOIN t2 ON cid=contact_id WHERE firstname like '%foo%' GROUP BY cid ORDER BY surname, firstname;

drop table t2;
unlock tables;
drop table t1;

#
# Test of group by bug in bugzilla
#

CREATE TABLE t1 (
  bug_id mediumint(9) NOT NULL auto_increment,
  groupset bigint(20) DEFAULT '0' NOT NULL,
  assigned_to mediumint(9) DEFAULT '0' NOT NULL,
  bug_file_loc text,
  bug_severity enum('blocker','critical','major','normal','minor','trivial','enhancement') DEFAULT 'blocker' NOT NULL,
  bug_status enum('','NEW','ASSIGNED','REOPENED','RESOLVED','VERIFIED','CLOSED') DEFAULT 'NEW' NOT NULL,
  creation_ts datetime DEFAULT '0000-00-00 00:00:00' NOT NULL,
  delta_ts timestamp,
  short_desc mediumtext,
  long_desc mediumtext,
  op_sys enum('All','Windows 3.1','Windows 95','Windows 98','Windows NT','Windows 2000','Linux','other') DEFAULT 'All' NOT NULL,
  priority enum('P1','P2','P3','P4','P5') DEFAULT 'P1' NOT NULL,
  product varchar(64) DEFAULT '' NOT NULL,
  rep_platform enum('All','PC','VTD-8','Other'),
  reporter mediumint(9) DEFAULT '0' NOT NULL,
  version varchar(16) DEFAULT '' NOT NULL,
  component varchar(50) DEFAULT '' NOT NULL,
  resolution enum('','FIXED','INVALID','WONTFIX','LATER','REMIND','DUPLICATE','WORKSFORME') DEFAULT '' NOT NULL,
  target_milestone varchar(20) DEFAULT '' NOT NULL,
  qa_contact mediumint(9) DEFAULT '0' NOT NULL,
  status_whiteboard mediumtext NOT NULL,
  votes mediumint(9) DEFAULT '0' NOT NULL,
  PRIMARY KEY (bug_id),
  KEY assigned_to (assigned_to),
  KEY creation_ts (creation_ts),
  KEY delta_ts (delta_ts),
  KEY bug_severity (bug_severity),
  KEY bug_status (bug_status),
  KEY op_sys (op_sys),
  KEY priority (priority),
  KEY product (product),
  KEY reporter (reporter),
  KEY version (version),
  KEY component (component),
  KEY resolution (resolution),
  KEY target_milestone (target_milestone),
  KEY qa_contact (qa_contact),
  KEY votes (votes)
);

INSERT INTO t1 VALUES (1,0,0,'','normal','','2000-02-10 09:25:12',20000321114747,'','','Linux','P1','TestProduct','PC',3,'other','TestComponent','','M1',0,'',0);
INSERT INTO t1 VALUES (9,0,0,'','enhancement','','2000-03-10 11:49:36',20000321114747,'','','All','P5','AAAAA','PC',3,'2.00 CD - Pre','BBBBBBBBBBBBB - conversion','','',0,'',0);
INSERT INTO t1 VALUES (10,0,0,'','enhancement','','2000-03-10 18:10:16',20000321114747,'','','All','P4','AAAAA','PC',3,'2.00 CD - Pre','BBBBBBBBBBBBB - conversion','','',0,'',0);
INSERT INTO t1 VALUES (7,0,0,'','critical','','2000-03-09 10:50:21',20000321114747,'','','All','P1','AAAAA','PC',3,'2.00 CD - Pre','BBBBBBBBBBBBB - generic','','',0,'',0);
INSERT INTO t1 VALUES (6,0,0,'','normal','','2000-03-09 10:42:44',20000321114747,'','','All','P2','AAAAA','PC',3,'2.00 CD - Pre','kkkkkkkkkkk lllllllllll','','',0,'',0);
INSERT INTO t1 VALUES (8,0,0,'','major','','2000-03-09 11:32:14',20000321114747,'','','All','P3','AAAAA','PC',3,'2.00 CD - Pre','kkkkkkkkkkk lllllllllll','','',0,'',0);
INSERT INTO t1 VALUES (5,0,0,'','enhancement','','2000-03-09 10:38:59',20000321114747,'','','All','P5','CCC/CCCCCC','PC',5,'7.00','Administration','','',0,'',0);
INSERT INTO t1 VALUES (4,0,0,'','normal','','2000-03-08 18:32:14',20000321114747,'','','other','P2','TestProduct','Other',3,'other','TestComponent2','','',0,'',0);
INSERT INTO t1 VALUES (3,0,0,'','normal','','2000-03-08 18:30:52',20000321114747,'','','other','P2','TestProduct','Other',3,'other','TestComponent','','',0,'',0);
INSERT INTO t1 VALUES (2,0,0,'','enhancement','','2000-03-08 18:24:51',20000321114747,'','','All','P2','TestProduct','Other',4,'other','TestComponent2','','',0,'',0);
INSERT INTO t1 VALUES (11,0,0,'','blocker','','2000-03-13 09:43:41',20000321114747,'','','All','P2','CCC/CCCCCC','PC',5,'7.00','DDDDDDDDD','','',0,'',0);
INSERT INTO t1 VALUES (12,0,0,'','normal','','2000-03-13 16:14:31',20000321114747,'','','All','P2','AAAAA','PC',3,'2.00 CD - Pre','kkkkkkkkkkk lllllllllll','','',0,'',0);
INSERT INTO t1 VALUES (13,0,0,'','normal','','2000-03-15 16:20:44',20000321114747,'','','other','P2','TestProduct','Other',3,'other','TestComponent','','',0,'',0);
INSERT INTO t1 VALUES (14,0,0,'','blocker','','2000-03-15 18:13:47',20000321114747,'','','All','P1','AAAAA','PC',3,'2.00 CD - Pre','BBBBBBBBBBBBB - generic','','',0,'',0);
INSERT INTO t1 VALUES (15,0,0,'','minor','','2000-03-16 18:03:28',20000321114747,'','','All','P2','CCC/CCCCCC','Other',5,'7.00','DDDDDDDDD','','',0,'',0);
INSERT INTO t1 VALUES (16,0,0,'','normal','','2000-03-16 18:33:41',20000321114747,'','','All','P2','CCC/CCCCCC','Other',5,'7.00','Administration','','',0,'',0);
INSERT INTO t1 VALUES (17,0,0,'','normal','','2000-03-16 18:34:18',20000321114747,'','','All','P2','CCC/CCCCCC','Other',5,'7.00','Administration','','',0,'',0);
INSERT INTO t1 VALUES (18,0,0,'','normal','','2000-03-16 18:34:56',20000321114747,'','','All','P2','CCC/CCCCCC','Other',5,'7.00','Administration','','',0,'',0);
INSERT INTO t1 VALUES (19,0,0,'','enhancement','','2000-03-16 18:35:34',20000321114747,'','','All','P2','CCC/CCCCCC','Other',5,'7.00','Administration','','',0,'',0);
INSERT INTO t1 VALUES (20,0,0,'','enhancement','','2000-03-16 18:36:23',20000321114747,'','','All','P2','CCC/CCCCCC','Other',5,'7.00','Administration','','',0,'',0);
INSERT INTO t1 VALUES (21,0,0,'','enhancement','','2000-03-16 18:37:23',20000321114747,'','','All','P2','CCC/CCCCCC','Other',5,'7.00','Administration','','',0,'',0);
INSERT INTO t1 VALUES (22,0,0,'','enhancement','','2000-03-16 18:38:16',20000321114747,'','','All','P2','CCC/CCCCCC','Other',5,'7.00','Administration','','',0,'',0);
INSERT INTO t1 VALUES (23,0,0,'','normal','','2000-03-16 18:58:12',20000321114747,'','','All','P2','CCC/CCCCCC','Other',5,'7.00','DDDDDDDDD','','',0,'',0);
INSERT INTO t1 VALUES (24,0,0,'','normal','','2000-03-17 11:08:10',20000321114747,'','','All','P2','AAAAAAAA-AAA','PC',3,'2.8','Web Interface','','',0,'',0);
INSERT INTO t1 VALUES (25,0,0,'','normal','','2000-03-17 11:10:45',20000321114747,'','','All','P2','AAAAAAAA-AAA','PC',3,'2.8','Web Interface','','',0,'',0);
INSERT INTO t1 VALUES (26,0,0,'','normal','','2000-03-17 11:15:47',20000321114747,'','','All','P2','AAAAAAAA-AAA','PC',3,'2.8','Web Interface','','',0,'',0);
INSERT INTO t1 VALUES (27,0,0,'','normal','','2000-03-17 17:45:41',20000321114747,'','','All','P2','CCC/CCCCCC','PC',5,'7.00','DDDDDDDDD','','',0,'',0);
INSERT INTO t1 VALUES (28,0,0,'','normal','','2000-03-20 09:51:45',20000321114747,'','','Windows NT','P2','TestProduct','PC',8,'other','TestComponent','','',0,'',0);
INSERT INTO t1 VALUES (29,0,0,'','normal','','2000-03-20 11:15:09',20000321114747,'','','All','P5','AAAAAAAA-AAA','PC',3,'2.8','Web Interface','','',0,'',0);
CREATE TABLE t2 (
  value tinytext,
  program varchar(64),
  initialowner tinytext NOT NULL,
  initialqacontact tinytext NOT NULL,
  description mediumtext NOT NULL
);

INSERT INTO t2 VALUES ('TestComponent','TestProduct','id0001','','');
INSERT INTO t2 VALUES ('BBBBBBBBBBBBB - conversion','AAAAA','id0001','','');
INSERT INTO t2 VALUES ('BBBBBBBBBBBBB - generic','AAAAA','id0001','','');
INSERT INTO t2 VALUES ('TestComponent2','TestProduct','id0001','','');
INSERT INTO t2 VALUES ('BBBBBBBBBBBBB - eeeeeeeee','AAAAA','id0001','','');
INSERT INTO t2 VALUES ('kkkkkkkkkkk lllllllllll','AAAAA','id0001','','');
INSERT INTO t2 VALUES ('Test Procedures','AAAAA','id0001','','');
INSERT INTO t2 VALUES ('Documentation','AAAAA','id0003','','');
INSERT INTO t2 VALUES ('DDDDDDDDD','CCC/CCCCCC','id0002','','');
INSERT INTO t2 VALUES ('Eeeeeeee Lite','CCC/CCCCCC','id0002','','');
INSERT INTO t2 VALUES ('Eeeeeeee Full','CCC/CCCCCC','id0002','','');
INSERT INTO t2 VALUES ('Administration','CCC/CCCCCC','id0002','','');
INSERT INTO t2 VALUES ('Distribution','CCC/CCCCCC','id0002','','');
INSERT INTO t2 VALUES ('Setup','CCC/CCCCCC','id0002','','');
INSERT INTO t2 VALUES ('Unspecified','CCC/CCCCCC','id0002','','');
INSERT INTO t2 VALUES ('Web Interface','AAAAAAAA-AAA','id0001','','');
INSERT INTO t2 VALUES ('Host communication','AAAAA','id0001','','');
set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

select value,description,bug_id from t2 left join t1 on t2.program=t1.product and t2.value=t1.component where program="AAAAA";
select value,description,COUNT(bug_id) from t2 left join t1 on t2.program=t1.product and t2.value=t1.component where program="AAAAA" group by value;
select value,description,COUNT(bug_id) from t2 left join t1 on t2.program=t1.product and t2.value=t1.component where program="AAAAA" group by value having COUNT(bug_id) IN (0,2);
# NOTE: The DISTINCT is to force sort-based aggregation, making the query somewhat
# more deterministic between the hypergraph and non-hypergraph optimizers.
select row_number() over (), value,description,COUNT(DISTINCT bug_id) from t2 left join t1 on t2.program=t1.product and t2.value=t1.component where program="AAAAA" group by value having COUNT(DISTINCT bug_id) IN (0,2);

set @@sql_mode=@previous_sql_mode_htnt542nh;
drop table t1,t2;

#
# Problem with functions and group functions when no matching rows
#

create table t1 (foo int);
insert into t1 values (1);
select 1+1, "a",count(*) from t1 where foo in (2);
insert into t1 values (1);
select 1+1,"a",count(*) from t1 where foo in (2);
drop table t1;

#
# Test GROUP BY DESC

CREATE TABLE t1 (
  spID int(10) unsigned,
  userID int(10) unsigned,
  score smallint(5) unsigned,
  key (spid),
  key (score)
);

INSERT INTO t1 VALUES (1,1,1),(2,2,2),(2,1,1),(3,3,3),(4,3,3),(5,3,3),(6,3,3),(7,3,3);
#skip # ANALYZE TABLE t1;
 select userid,count(*) from t1 group by userid order by userid desc;
 select userid,count(*) from t1 group by userid order by null;
select userid,count(*) from t1 group by userid order by userid desc;
select userid,count(*) from t1 group by userid having (count(*)+1) IN (4,3) order by userid desc;
select userid,count(*) from t1 group by userid having 3  IN (1,COUNT(*)) order by userid desc;
 select spid,count(*) from t1 where spid between 1 and 2 group by spid order by spid desc;
 select spid,count(*) from t1 where spid between 1 and 2 group by spid;
 select spid,count(*) from t1 where spid between 1 and 2 group by spid order by null;
select spid,count(*) from t1 where spid between 1 and 2 group by spid;
select spid,count(*) from t1 where spid between 1 and 2 group by spid order by spid desc;
#skip  select sql_big_result spid,sum(userid) from t1 group by spid order by spid desc;
#skip  select sql_big_result spid,sum(userid) from t1 group by spid order by null;
#skip select sql_big_result spid,sum(userid) from t1 group by spid order by spid desc;
#skip  select sql_big_result score,count(*) from t1 group by score order by score desc;
#skip  select sql_big_result score,count(*) from t1 group by score order by null;
#skip select sql_big_result score,count(*) from t1 group by score order by score desc;
drop table t1;

# not purely group_by bug, but group_by is involved...

create table t1 (a date default null, b date default null);
insert t1 values ('1999-10-01','2000-01-10'), ('1997-01-01','1998-10-01');
select a,min(b) c,count(distinct rand()) from t1 group by a having c<a + interval 1 day;
drop table t1;

# Compare with hash keys

CREATE TABLE t1 (a char(1));
INSERT INTO t1 VALUES ('A'),('B'),('A'),('B'),('A'),('B'),(NULL),('a'),('b'),(NULL),('A'),('B'),(NULL);
set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

SELECT a FROM t1 GROUP BY a;
SELECT a,count(*) FROM t1 GROUP BY a;
SELECT a FROM t1 GROUP BY binary a;
SELECT a,count(*) FROM t1 GROUP BY binary a;
SELECT binary a FROM t1 GROUP BY 1;
SELECT binary a,count(*) FROM t1 GROUP BY 1;
# Do the same tests with MyISAM temporary tables
SET BIG_TABLES=1;
SELECT a FROM t1 GROUP BY a ORDER BY a;
SELECT a,count(*) FROM t1 GROUP BY a ORDER BY a;
SELECT a FROM t1 GROUP BY binary a ORDER BY binary a;
SELECT a,count(*) FROM t1 GROUP BY binary a ORDER BY binary a;
SELECT binary a FROM t1 GROUP BY 1 ORDER BY 1;
SELECT binary a,count(*) FROM t1 GROUP BY 1 ORDER BY 1;
SET BIG_TABLES=0;

set @@sql_mode=@previous_sql_mode_htnt542nh;
drop table t1;

#
# Test of key >= 256 bytes
#

CREATE TABLE t1 (
  `a` char(193) default NULL,
  `b` char(63) default NULL
);
INSERT INTO t1 VALUES ('abc','def'),('hij','klm');
SELECT CONCAT(a, b) FROM t1 GROUP BY 1;
SELECT CONCAT(a, b),count(*) FROM t1 GROUP BY 1;
SELECT CONCAT(a, b),count(distinct a) FROM t1 GROUP BY 1;
SELECT 1 FROM t1 GROUP BY CONCAT(a, b);
INSERT INTO t1 values ('hij','klm');
SELECT CONCAT(a, b),count(*) FROM t1 GROUP BY 1;
DROP TABLE t1;

#
# Test problem with ORDER BY on a SUM() column
#

create table t1 (One int unsigned, Two int unsigned, Three int unsigned, Four int unsigned);
insert into t1 values (1,2,1,4),(1,2,2,4),(1,2,3,4),(1,2,4,4),(1,1,1,4),(1,1,2,4),(1,1,3,4),(1,1,4,4),(1,3,1,4),(1,3,2,4),(1,3,3,4),(1,3,4,4);
select One, Two, sum(Four) from t1 group by One,Two;
drop table t1;

create table t1 (id integer primary key not null auto_increment, gender char(1));
insert into t1 values (NULL, 'M'), (NULL, 'F'),(NULL, 'F'),(NULL, 'F'),(NULL, 'M');
create table t2 (user_id integer not null, date date);
insert into t2 values (1, '2002-06-09'),(2, '2002-06-09'),(1, '2002-06-09'),(3, '2002-06-09'),(4, '2002-06-09'),(4, '2002-06-09');
select u.gender as gender, count(distinct  u.id) as dist_count, (count(distinct u.id)/5*100) as percentage from t1 u, t2 l where l.user_id = u.id group by u.gender;
select u.gender as  gender, count(distinct  u.id) as dist_count, (count(distinct u.id)/5*100) as percentage from t1 u, t2 l where l.user_id = u.id group by u.gender  order by percentage;
drop table t1,t2;

#
# The GROUP BY returned rows in wrong order in 3.23.51
#

CREATE TABLE t1 (ID1 int, ID2 int, ID int NOT NULL AUTO_INCREMENT,PRIMARY KEY(ID
));
insert into t1 values (1,244,NULL),(2,243,NULL),(134,223,NULL),(185,186,NULL);
select S.ID as xID, S.ID1 as xID1 from t1 as S left join t1 as yS  on S.ID1 between yS.ID1 and yS.ID2;
select S.ID as xID, S.ID1 as xID1, repeat('*',count(distinct yS.ID)) as Level from t1 as S left join t1 as yS  on S.ID1 between yS.ID1 and yS.ID2 group by xID order by xID1;
drop table t1;

#
# Problem with MAX and LEFT JOIN
#

CREATE TABLE t1 (
  pid int(11) unsigned NOT NULL default '0',
  c1id int(11) unsigned default NULL,
  c2id int(11) unsigned default NULL,
  value int(11) unsigned NOT NULL default '0',
  UNIQUE KEY pid2 (pid,c1id,c2id),
  UNIQUE KEY pid (pid,value)
) ;

INSERT INTO t1 VALUES (1, 1, NULL, 1),(1, 2, NULL, 2),(1, NULL, 3, 3),(1, 4, NULL, 4),(1, 5, NULL, 5);

CREATE TABLE t2 (
  id int(11) unsigned NOT NULL default '0',
  active enum('Yes','No') NOT NULL default 'Yes',
  PRIMARY KEY  (id)
) ;

INSERT INTO t2 VALUES (1, 'Yes'),(2, 'No'),(4, 'Yes'),(5, 'No');

CREATE TABLE t3 (
  id int(11) unsigned NOT NULL default '0',
  active enum('Yes','No') NOT NULL default 'Yes',
  PRIMARY KEY  (id)
);
INSERT INTO t3 VALUES (3, 'Yes');

select * from t1 AS m LEFT JOIN t2 AS c1 ON m.c1id = 
c1.id AND c1.active = 'Yes' LEFT JOIN t3 AS c2 ON m.c2id = c2.id AND 
c2.active = 'Yes' WHERE m.pid=1  AND (c1.id IS NOT NULL OR c2.id IS NOT NULL);
select max(value) from t1 AS m LEFT JOIN t2 AS c1 ON 
m.c1id = c1.id AND c1.active = 'Yes' LEFT JOIN t3 AS c2 ON m.c2id = 
c2.id AND c2.active = 'Yes' WHERE m.pid=1  AND (c1.id IS NOT NULL OR c2.id IS 
NOT NULL);
drop table t1,t2,t3;

#
# Test bug in GROUP BY on BLOB that is NULL or empty
#

create table t1 (a blob null);
insert into t1 values (NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(""),(""),(""),("b");
select a,count(*) from t1 group by a;
set big_tables=1;
select a,count(*) from t1 group by a;
drop table t1;

#
# Test of GROUP BY ... ORDER BY NULL optimization
#

create table t1 (a int not null, b int not null);
insert into t1 values (1,1),(1,2),(3,1),(3,2),(2,2),(2,1);
create table t2 (a int not null, b int not null, key(a));
insert into t2 values (1,3),(3,1),(2,2),(1,1);
#skip analyze table t1,t2;

#skip we need(80):
#skip select t1.a,t2.b from t1,t2 where t1.a=t2.a group by t1.a,t2.b;
#skip 1       1
#skip 1       3
#skip 2       2
#skip 3       1
#skip
#skip but got(80):
#skip select t1.a,t2.b from t1,t2 where t1.a=t2.a group by t1.a,t2.b;
#skip 1       3
#skip 1       1
#skip 3       1
#skip 2       2

#skip select t1.a,t2.b from t1,t2 where t1.a=t2.a group by t1.a,t2.b;

#skip select t1.a,t2.b from t1,t2 where t1.a=t2.a group by t1.a,t2.b ORDER BY NULL;
#skip select t1.a,t2.b from t1,t2 where t1.a=t2.a group by t1.a,t2.b;
#skip select t1.a,t2.b from t1,t2 where t1.a=t2.a group by t1.a,t2.b ORDER BY NULL;
drop table t1,t2;

#
# group function arguments in some functions
#

create table t1 (a int, b int);
insert into t1 values (1, 4),(10, 40),(1, 4),(10, 43),(1, 4),(10, 41),(1, 4),(10, 43),(1, 4);
select a, MAX(b), INTERVAL (MAX(b), 1,3,10,30,39,40,50,60,100,1000) from t1 group by a;
select a, MAX(b), CASE MAX(b) when 4 then 4 when 43 then 43 else 0 end from t1 group by a;
select a, MAX(b), FIELD(MAX(b), '43', '4', '5') from t1 group by a;
select a, MAX(b), CONCAT_WS(MAX(b), '43', '4', '5') from t1 group by a;
select a, MAX(b), ELT(MAX(b), 'a', 'b', 'c', 'd', 'e', 'f') from t1 group by a;
select a, MAX(b), MAKE_SET(MAX(b), 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h') from t1 group by a;
drop table t1;

#
# Problem with group by and alias
#

create table t1 (id int not null, qty int not null);
insert into t1 values (1,2),(1,3),(2,4),(2,5);
select id, sum(qty) as sqty, count(qty) as cqty from t1 group by id having sum(qty)>2 and cqty>1;
select id, sum(qty) as sqty from t1 group by id having sqty>2 and count(qty)>1;
select id, sum(qty) as sqty, count(qty) as cqty from t1 group by id having sqty>2 and cqty>1;
select id, sum(qty) as sqty, count(qty) as cqty from t1 group by id having sum(qty)>2 and count(qty)>1;
#skip select count(*), case interval(qty,2,3,4,5,6,7,8) when -1 then NULL when 0 then "zero" when 1 then "one" when 2 then "two" end as category from t1 group by category;
select count(*), interval(qty,2,3,4,5,6,7,8) as category from t1 group by category;
drop table t1;
#
# Tests for bug #1355: 'Using filesort' is missing in  when ORDER BY
# NULL is used.
#
CREATE TABLE t1 (
  userid int(10) unsigned,
  score smallint(5) unsigned,
  key (score)
);
INSERT INTO t1 VALUES (1,1),(2,2),(1,1),(3,3),(3,3),(3,3),(3,3),(3,3);
#skip # ANALYZE TABLE t1;
SELECT userid,count(*) FROM t1 GROUP BY userid ORDER BY userid DESC;
 SELECT userid,count(*) FROM t1 GROUP BY userid ORDER BY userid DESC;
DROP TABLE t1;
CREATE TABLE t1 (
  i int(11) default NULL,
  j int(11) default NULL
);
INSERT INTO t1 VALUES (1,2),(2,3),(4,5),(3,5),(1,5),(23,5);
#skip # ANALYZE TABLE t1;
set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));
SELECT i, COUNT(DISTINCT(i)) FROM t1 GROUP BY j ORDER BY NULL;
 SELECT i, COUNT(DISTINCT(i)) FROM t1 GROUP BY j ORDER BY NULL;
set @@sql_mode=@previous_sql_mode_htnt542nh;
DROP TABLE t1;

#Test for BUG#6976: Aggregate functions have incorrect NULL-ness
create table t1 (a int);
insert into t1 values(null);
select min(a) is null from t1;
select min(a) is null or null from t1;
select 1 and min(a) is null from t1;
drop table t1;

# Test for BUG#5400: GROUP_CONCAT returns everything twice.
create table t1 ( col1 int, col2 int );
insert into t1 values (1,1),(1,2),(1,3),(2,1),(2,2);
select group_concat( distinct col1 ) as alias from t1
  group by col2 having alias like '%';

drop table t1;

#
# Test BUG#8216 when referring in HAVING to n alias which is rand() function
#

CREATE TABLE t1 (a INTEGER, b INTEGER, c INTEGER);
INSERT INTO t1 (a,b) VALUES (1,2),(1,3),(2,5);

SELECT a, 0.1*0+1 r2, SUM(1) r1 FROM t1 WHERE a = 1 GROUP BY a HAVING r1>1 AND r2=1;

SELECT a, ROUND(RAND(100)*10) r2, SUM(1) r1 FROM t1 GROUP BY a;
# Will have two rows unless by mistake RAND() is done again for the
# HAVING r2 reference (not cached).
# The last predicate (r2 > 0) will detect if r2 has been computed when we
# reference it from the tmp table's field (pre-computed since it's an alias).
# This requires a certain order of evaluation in copy_funcs
# ("aliased Item" before "referencing Item")
SELECT a, ROUND(RAND(100)*10) r2, SUM(1) r1 FROM t1 GROUP BY a
  HAVING r1>=1 AND r2<=7 AND r2 > 0;
# Referencing item might be in a subquery:
SELECT a, ROUND(RAND(100)*10) r2, SUM(1) r1 FROM t1 GROUP BY a
  HAVING r1>=1 AND (SELECT r2<=7 AND r2 > 0 FROM t1 AS t2 LIMIT 1);

# rand(100)*10 will be < 2 only for the first row (of 3)
# NOTE: This currently gives the wrong result, because HAVING
# and send() both evaluate RAND() instead
# of sharing the result between them. See the comment in
# JOIN::create_root_access_path_for_join() for more details.
SELECT a, ROUND(RAND(100)*10) r2, SUM(1) r1 FROM t1 WHERE a = 1
 GROUP BY a HAVING r1>1 AND r2<=2;
SELECT a, ROUND(RAND(100)*10) r2, SUM(1) r1 FROM t1 WHERE a = 1
 GROUP BY a HAVING r1>1 AND r2<=2 ORDER BY a+r2+r1;
SELECT a,SUM(b) FROM t1 WHERE a=1 GROUP BY c;
SELECT a*SUM(b) FROM t1 WHERE a=1 GROUP BY c;
SELECT SUM(a)*SUM(b) FROM t1 WHERE a=1 GROUP BY c;
SELECT a,SUM(b) FROM t1 WHERE a=1 GROUP BY c HAVING a=1;
SELECT a AS d,SUM(b) FROM t1 WHERE a=1 GROUP BY c HAVING d=1;
SELECT SUM(a)*SUM(b) AS d FROM t1 WHERE a=1 GROUP BY c HAVING d > 0;

SELECT a, ROUND(RAND(100)*10) r2 FROM t1;
SELECT ROUND(RAND(100)*10) r2 FROM t1 GROUP BY r2;

DROP TABLE t1;

# Another query where order of evaluation in copy_funcs matters:
CREATE TABLE t1(i INT);
INSERT INTO t1 VALUES (NULL),(1);
SELECT DISTINCT STD(i)+0 as splus0, i+0 as plain FROM t1 GROUP BY i ;
DROP TABLE t1;

# Following is a Myisam specific bug.
# Test for BUG#9213 GROUP BY query on utf-8 key returns wrong results
create table t1(a int) ;
insert into t1 values (0),(1),(2),(3),(4),(5),(6),(8),(9);
create table t2 (
  a int,
  b varchar(200) NOT NULL,
  c varchar(50) NOT NULL,
  d varchar(100) NOT NULL,
  primary key (a,b(132),c,d),
  key a (a,b)
)  charset=utf8;

#skip insert into t2 select
#skip    x3.a,  -- 3
#skip    concat('val-', x3.a + 3*x4.a), -- 12
#skip    concat('val-', @a:=x3.a + 3*x4.a + 12*C.a), -- 120
#skip    concat('val-', @a + 120*D.a)
#skip from t1 x3, t1 x4, t1 C, t1 D where x3.a < 3 and x4.a < 4 and D.a < 4
#skip order by x3.a, x4.a, C.a, D.a;

delete from t2  where a = 2 and b = 'val-2' order by a,b,c,d limit 30;
#skip # ANALYZE TABLE t1, t2;
 select c from t2 where a = 2 and b = 'val-2' group by c;
select c from t2 where a = 2 and b = 'val-2' group by c;
drop table t1,t2;

# Test for BUG#9298 "Wrong handling of int unsigned columns in GROUP functions"
# (the actual problem was with protocol code, not GROUP BY)
create table t1 (b int unsigned not null);
insert into t1 values(3000000000);
select * from t1;
select min(b) from t1;
drop table t1;

#
# Test for bug #11088: GROUP BY a BLOB column with COUNT(DISTINCT column1) 
#

CREATE TABLE t1 (id int PRIMARY KEY, user_id int, hostname longtext);

INSERT INTO t1 VALUES
  (1, 7, 'cache-dtc-af05.proxy.aol.com'),
  (2, 3, 'what.ever.com'),
  (3, 7, 'cache-dtc-af05.proxy.aol.com'),
  (4, 7, 'cache-dtc-af05.proxy.aol.com');

SELECT hostname, COUNT(DISTINCT user_id) as no FROM t1
  WHERE hostname LIKE '%aol%'
    GROUP BY hostname;

DROP TABLE t1;

#
# Test for bug #8614: GROUP BY 'const' with DISTINCT  
#

CREATE TABLE t1 (a  int, b int);
INSERT INTO t1 VALUES (1,2), (1,3);
set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

SELECT a, b FROM t1 GROUP BY 'const';
SELECT DISTINCT a, b FROM t1 GROUP BY 'const';

set @@sql_mode=@previous_sql_mode_htnt542nh;
DROP TABLE t1;

#
# Test for bug #11385: GROUP BY for datetime converted to decimals  
#

CREATE TABLE t1 (id INT, dt DATETIME);
INSERT INTO t1 VALUES ( 1, '2005-05-01 12:30:00' );
INSERT INTO t1 VALUES ( 1, '2005-05-01 12:30:00' );
INSERT INTO t1 VALUES ( 1, '2005-05-01 12:30:00' );
INSERT INTO t1 VALUES ( 1, '2005-05-01 12:30:00' );
set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

SELECT dt DIV 1 AS f, id FROM t1 GROUP BY f;

set @@sql_mode=@previous_sql_mode_htnt542nh;
DROP TABLE t1;

#
# Test for bug #11295: GROUP BY a BLOB column with COUNT(DISTINCT column1) 
#                      when the BLOB column takes NULL values
# 

CREATE TABLE t1 (id varchar(20) NOT NULL);
INSERT INTO t1 VALUES ('trans1'), ('trans2');
CREATE TABLE t2 (id varchar(20) NOT NULL, err_comment blob NOT NULL);
INSERT INTO t2 VALUES ('trans1', 'a problem');
SELECT COUNT(DISTINCT(t1.id)), LEFT(err_comment, 256) AS comment
  FROM t1 LEFT JOIN t2 ON t1.id=t2.id GROUP BY comment;

DROP TABLE t1, t2;

#
# Bug #12266 GROUP BY expression on DATE column produces result with
#            reduced length
#
create table t1 (f1 date);
insert into t1 values('2005-06-06');
insert into t1 values('2005-06-06');
select date(left(f1+0,8)) from t1 group by 1;
drop table t1;

#
# Test for bug #11414: crash on Windows for a simple GROUP BY query 
#  
                    
CREATE TABLE t1 (n int);
INSERT INTO t1 VALUES (1);
SELECT n+1 AS n FROM t1 GROUP BY n;
DROP TABLE t1;

#
# BUG#12695: Item_func_isnull::update_used_tables
# did not update const_item_cache
#
create table t1(f1 varchar(5) key);
insert into t1 values (1),(2);
#skip select sql_buffer_result max(f1) is null from t1;
#skip select sql_buffer_result max(f1)+1 from t1;
drop table t1;

#
# BUG#14019-4.1-opt
#
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (1),(2);

set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));
SELECT a FROM t1 GROUP BY 'a';
SELECT a FROM t1 GROUP BY "a";
set @@sql_mode=@previous_sql_mode_htnt542nh;

SELECT a FROM t1 GROUP BY `a`;

set sql_mode=ANSI_QUOTES;
#skip SELECT a FROM t1 GROUP BY "a";
#skip SELECT a FROM t1 GROUP BY 'a';
#skip SELECT a FROM t1 GROUP BY `a`;
#skip set sql_mode=DEFAULT;

#skip SELECT a FROM t1 HAVING 'a' > 1;
#skip SELECT a FROM t1 HAVING "a" > 1;
#skip SELECT a FROM t1 HAVING `a` > 1;
#skip
#skip SELECT a FROM t1 ORDER BY 'a' DESC;
#skip SELECT a FROM t1 ORDER BY "a" DESC;
#skip SELECT a FROM t1 ORDER BY `a` DESC;
DROP TABLE t1;

#
# Bug #29717 INSERT INTO SELECT inserts values even if SELECT statement itself
# returns empty
# 
CREATE TABLE t1 (
    f1 int(10) unsigned NOT NULL auto_increment primary key,
    f2 varchar(100) NOT NULL default ''
);
CREATE TABLE t2 (
    f1 varchar(10) NOT NULL default '',
    f2 char(3) NOT NULL default '',
    PRIMARY KEY  (`f1`),
    KEY `k1` (`f2`,`f1`)
);

INSERT INTO t1 values(NULL, '');
INSERT INTO `t2` VALUES ('486878','WDT'),('486910','WDT');
#skip SELECT SQL_BUFFER_RESULT avg(t2.f1) FROM t1, t2 where t2.f2 = 'SIR' GROUP BY t1.f1;
SELECT avg(t2.f1) FROM t1, t2 where t2.f2 = 'SIR' GROUP BY t1.f1;
DROP TABLE t1, t2;


# End of 4.1 tests

#
# Bug#11211: Ambiguous column reference in GROUP BY.
#

create table t1 (c1 char(3), c2 char(3));
create table t2 (c3 char(3), c4 char(3));
insert into t1 values ('aaa', 'bb1'), ('aaa', 'bb2');
insert into t2 values ('aaa', 'bb1'), ('aaa', 'bb2');

set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

# query with ambiguous column reference 'c2'
select t1.c1 as c2 from t1, t2 where t1.c2 = t2.c4
group by c2;

set @@sql_mode=@previous_sql_mode_htnt542nh;

# this query has no ambiguity
select t1.c1 as c2 from t1, t2 where t1.c2 = t2.c4
group by t1.c1;

drop table t1, t2;

#
# Bug #20466: a view is mixing data when there's a trigger on the table
#
CREATE TABLE t1 (a tinyint(3), b varchar(255), PRIMARY KEY  (a));


CREATE TABLE t2 (a tinyint(3), b tinyint(3), PRIMARY KEY  (a), KEY b (b));

INSERT INTO t2 VALUES (1,1), (2,1), (6,6), (18,17), (15,25), (16,25),
 (17,25), (10,54), (5,62),(3,68);

CREATE VIEW v1 AS select t1.a, concat(t1.b,'') AS b, t1.b as real_b from t1;

# ANALYZE TABLE t1,t2;

 
SELECT straight_join v1.a, v1.b, v1.real_b from t2, v1
where t2.b=v1.a GROUP BY t2.b;
SELECT straight_join v1.a, v1.b, v1.real_b from t2, v1
where t2.b=v1.a GROUP BY t2.b;

DROP VIEW v1;
DROP TABLE t1,t2;

#
# Bug#22781: SQL_BIG_RESULT fails to influence sort plan
#
CREATE TABLE t1 (a INT PRIMARY KEY, b INT, key (b));

INSERT INTO t1 VALUES (1,      1);
INSERT INTO t1 SELECT  a + 1 , MOD(a + 1 , 20) FROM t1;
INSERT INTO t1 SELECT  a + 2 , MOD(a + 2 , 20) FROM t1;
INSERT INTO t1 SELECT  a + 4 , MOD(a + 4 , 20) FROM t1;
INSERT INTO t1 SELECT  a + 8 , MOD(a + 8 , 20) FROM t1;
INSERT INTO t1 SELECT  a + 16, MOD(a + 16, 20) FROM t1;
INSERT INTO t1 SELECT  a + 32, MOD(a + 32, 20) FROM t1;
INSERT INTO t1 SELECT  a + 64, MOD(a + 64, 20) FROM t1;

SELECT MIN(b), MAX(b) from t1;
# ANALYZE TABLE t1;
 SELECT b, sum(1) FROM t1 GROUP BY b;
#skip SELECT SQL_BIG_RESULT b, sum(1) FROM t1 GROUP BY b;
SELECT b, sum(1) FROM t1 GROUP BY b;
#skip SELECT SQL_BIG_RESULT b, sum(1) FROM t1 GROUP BY b;
DROP TABLE t1;

#
# Bug #23417: Too strict checks against GROUP BY in the ONLY_FULL_GROUP_BY mode
#
CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (1,1),(2,1),(3,2),(4,2),(5,3),(6,3);

SET SQL_MODE = 'ONLY_FULL_GROUP_BY';
SELECT MAX(a)-MIN(a) FROM t1 GROUP BY b;
SELECT CEILING(MIN(a)) FROM t1 GROUP BY b;
SELECT CASE WHEN AVG(a)>=0 THEN 'Positive' ELSE 'Negative' END FROM t1 
 GROUP BY b;
SELECT a + 1 FROM t1 GROUP BY a;
SELECT (SELECT t1_outer.a FROM t1 AS t1_inner GROUP BY b LIMIT 1) 
  FROM t1 AS t1_outer;
SELECT 1 FROM t1 as t1_outer GROUP BY a 
  HAVING (SELECT t1_outer.a FROM t1 AS t1_inner GROUP BY b LIMIT 1);
SELECT (SELECT SUM(t1_inner.a) FROM t1 AS t1_inner LIMIT 1) 
  FROM t1 AS t1_outer GROUP BY t1_outer.b;
SELECT (SELECT SUM(t1_inner.a) FROM t1 AS t1_inner GROUP BY t1_inner.b LIMIT 1)
  FROM t1 AS t1_outer;
# This statement is valid, as aggregation happens in outer query.
let $query=
SELECT (SELECT SUM(t1_outer.a) FROM t1 AS t1_inner LIMIT 1) 
  FROM t1 AS t1_outer GROUP BY t1_outer.b;
eval $query;
SET SQL_MODE = '';
eval $query;
SET SQL_MODE = 'ONLY_FULL_GROUP_BY';
let $query=
SELECT (SELECT SUM(t1_outer.a+0*t1_inner.a) FROM t1 AS t1_inner LIMIT 1) 
  FROM t1 AS t1_outer GROUP BY t1_outer.b;
# Here we add a column of t1_inner in the MAX() so aggregation happens
# in inner Q, which cannot know what value of t1_outer.a to pick, this
# is invalid. And the result changes (multiples of 6).
eval $query;
SET SQL_MODE = '';
eval $query;
SET SQL_MODE = 'ONLY_FULL_GROUP_BY';

SELECT 1 FROM t1 as t1_outer 
  WHERE (SELECT t1_outer.b FROM t1 AS t1_inner GROUP BY t1_inner.b LIMIT 1);

SELECT b FROM t1 GROUP BY b HAVING CEILING(b) > 0;

SELECT 1 FROM t1 GROUP BY b HAVING b = 2 OR b = 3 OR SUM(a) > 12;
SELECT 1 FROM t1 GROUP BY b HAVING ROW (b,b) = ROW (1,1);

# I deleted pk from table, as it was making query below become valid.
DROP TABLE t1;
SET SQL_MODE = '';
#
# Bug#27874: Non-grouped columns are allowed by * in ONLY_FULL_GROUP_BY mode.
#
SET SQL_MODE = 'ONLY_FULL_GROUP_BY';
create table t1(f1 int, f2 int);
select * from t1 group by f1, f2;
drop table t1;
#skip SET SQL_MODE = DEFAULT;

#
# Bug #32202: ORDER BY not working with GROUP BY
#

CREATE TABLE t1(
  id INT AUTO_INCREMENT PRIMARY KEY, 
  c1 INT NOT NULL, 
  c2 INT NOT NULL,
  UNIQUE KEY (c2,c1));

INSERT INTO t1(c1,c2) VALUES (5,1), (4,1), (3,5), (2,3), (1,3);

# Show that the test cases from the bug report pass
SELECT * FROM t1 ORDER BY c1;
SELECT * FROM t1 GROUP BY id ORDER BY c1;

# Show that DESC is handled correctly
SELECT * FROM t1 GROUP BY id ORDER BY id DESC;

# Show that results are correctly ordered when ORDER BY fields
# are a subset of GROUP BY ones
SELECT * FROM t1 GROUP BY c2 ,c1, id ORDER BY c2, c1;
SELECT * FROM t1 GROUP BY c2, c1, id ORDER BY c2 DESC, c1;
SELECT * FROM t1 GROUP BY c2, c1, id ORDER BY c2 DESC, c1 DESC;

set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

# Show that results are correctly ordered when GROUP BY fields
# are a subset of ORDER BY ones
SELECT * FROM t1 GROUP BY c2  ORDER BY c2, c1;
SELECT * FROM t1 GROUP BY c2  ORDER BY c2 DESC, c1;
SELECT * FROM t1 GROUP BY c2  ORDER BY c2 DESC, c1 DESC;

set @@sql_mode=@previous_sql_mode_htnt542nh;

DROP TABLE t1;


SET @save_sql_mode=@@sql_mode;
SET @@sql_mode='ONLY_FULL_GROUP_BY';

CREATE TABLE t1 (a INT, b INT, c INT DEFAULT 0);
INSERT INTO t1 (a, b) VALUES (3,3), (2,2), (3,3), (2,2), (3,3), (4,4);
CREATE TABLE t2 SELECT * FROM t1;
SELECT COUNT(*) FROM t1 ORDER BY COUNT(*);
SELECT COUNT(*) FROM t1 ORDER BY COUNT(*) + 1;
# This is a bad ORDER BY, but as the result is guaranteed to have only
# one row, there is no actual issue - ordering doesn't matter.
SELECT COUNT(*) FROM t1 ORDER BY COUNT(*) + a;
SELECT COUNT(*) FROM t1 ORDER BY COUNT(*), 1;
SELECT COUNT(*) FROM t1 ORDER BY COUNT(*), a;
SELECT COUNT(*) FROM t1 ORDER BY SUM(a);
SELECT COUNT(*) FROM t1 ORDER BY SUM(a + 1);
SELECT COUNT(*) FROM t1 ORDER BY SUM(a) + 1;
SELECT COUNT(*) FROM t1 ORDER BY SUM(a), b;

SELECT SUM(a) FROM t1 ORDER BY COUNT(b);

SELECT t1.a FROM t1 ORDER BY (SELECT SUM(t2.a) FROM t2);

SELECT t1.a FROM t1 ORDER BY (SELECT SUM(t2.a) FROM t2 ORDER BY t2.a);


SELECT 1 FROM t1 GROUP BY t1.a
  HAVING (SELECT AVG(SUM(t1.b) + 1) FROM t2 ORDER BY t2.a LIMIT 1);
SELECT 1 FROM t1 GROUP BY t1.a
  HAVING (SELECT AVG(SUM(t1.b) + t2.b) FROM t2 ORDER BY t2.a LIMIT 1);

# Both SUMs are aggregated in the subquery, no mixture:
SELECT t1.a FROM t1 
  WHERE t1.a = (SELECT t2.a FROM t2 GROUP BY t2.a
                  ORDER BY SUM(t2.b), SUM(t1.b) LIMIT 1);

# SUM(t1.b) is aggregated in the subquery, no mixture:
SELECT t1.a, SUM(t1.b) FROM t1 
  WHERE t1.a = (SELECT SUM(t2.b) FROM t2 GROUP BY t2.a
                  ORDER BY SUM(t2.b), SUM(t1.b) LIMIT 1)
  GROUP BY t1.a;

# 2nd SUM(t1.b) is aggregated in the subquery, no mixture:
SELECT t1.a, SUM(t1.b) FROM t1 
  WHERE t1.a = (SELECT SUM(t2.b) FROM t2
                  ORDER BY SUM(t2.b) + SUM(t1.b) LIMIT 1)
  GROUP BY t1.a;

# SUM(t2.b + t1.a) is aggregated in the subquery, no mixture:
SELECT t1.a, SUM(t1.b) FROM t1 
  WHERE t1.a = (SELECT SUM(t2.b) FROM t2
                  ORDER BY SUM(t2.b + t1.a) LIMIT 1)
  GROUP BY t1.a;

SELECT t1.a FROM t1 GROUP BY t1.a
    HAVING (1, 1) = (SELECT SUM(t1.a), t1.a FROM t2 LIMIT 1);

select avg (
  (select
    (select sum(outr.a + innr.a) from t1 as innr limit 1) as tt
   from t1 as outr order by outr.a limit 1))
from t1 as most_outer;


select (select sum(outr.a + t1.a) from t1 limit 1) as tt from t1 as outr order by outr.a;

SET sql_mode=@save_sql_mode;
DROP TABLE t1, t2;

CREATE TABLE t1 (
  pk int(11) NOT NULL AUTO_INCREMENT,
  int_nokey int(11) NOT NULL,
  int_key int(11) NOT NULL,
  varchar_key varchar(1) NOT NULL,
  varchar_nokey varchar(1) NOT NULL,
  PRIMARY KEY (pk),
  KEY int_key (int_key),
  KEY varchar_key (varchar_key)
);
INSERT INTO t1 VALUES 
(1,5,5, 'h','h'),
(2,1,1, '{','{'),
(3,1,1, 'z','z'),
(4,8,8, 'x','x'),
(5,7,7, 'o','o'),
(6,3,3, 'p','p'),
(7,9,9, 'c','c'),
(8,0,0, 'k','k'),
(9,6,6, 't','t'),
(10,0,0,'c','c');
# ANALYZE TABLE t1;
 SELECT COUNT(varchar_key) AS x FROM t1 WHERE pk = 8 having 'foo'='bar';
SELECT COUNT(varchar_key) AS x FROM t1 WHERE pk = 8 having 'foo'='bar';
drop table t1;
  
# Bug #21174: Index degrades sort performance and 
#             optimizer does not honor IGNORE INDEX.
#             a.k.a WL3527.
#
CREATE TABLE t1 (a INT, b INT,
                 PRIMARY KEY (a),
                 KEY i2(a,b));
INSERT INTO t1 VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8);
INSERT INTO t1 SELECT a + 8,b FROM t1;
INSERT INTO t1 SELECT a + 16,b FROM t1;
INSERT INTO t1 SELECT a + 32,b FROM t1;
INSERT INTO t1 SELECT a + 64,b FROM t1;
INSERT INTO t1 SELECT a + 128,b FROM t1 limit 16;
# ANALYZE TABLE t1;
 SELECT a FROM t1 WHERE a < 2;
 SELECT a FROM t1 WHERE a < 2 ORDER BY a;
 SELECT a FROM t1 WHERE a < 2 GROUP BY a;
 SELECT a FROM t1 IGNORE INDEX (PRIMARY,i2);
 SELECT a FROM t1 IGNORE INDEX FOR JOIN (PRIMARY,i2);
SELECT a FROM t1 IGNORE INDEX FOR GROUP BY (PRIMARY,i2) GROUP BY a;
FLUSH STATUS;
SHOW SESSION STATUS LIKE 'Sort_scan%';
SELECT a FROM t1 IGNORE INDEX FOR ORDER BY (PRIMARY,i2) ORDER BY a;
FLUSH STATUS;
SHOW SESSION STATUS LIKE 'Sort_scan%';
SELECT a FROM t1 IGNORE INDEX FOR ORDER BY (PRIMARY,i2) ORDER BY a;
 SELECT a FROM t1 IGNORE INDEX FOR ORDER BY (PRIMARY)
  IGNORE INDEX FOR GROUP BY (i2) GROUP BY a;
 SELECT a FROM t1 IGNORE INDEX (PRIMARY) IGNORE INDEX FOR ORDER BY (i2);
 SELECT a FROM t1 FORCE INDEX (i2);
 SELECT a FROM t1 USE INDEX ();
 SELECT a FROM t1 USE INDEX () USE INDEX (i2);
 SELECT a FROM t1 USE INDEX (i2) USE INDEX ();
# disable the columns irrelevant to this test here. On some systems 
# without support for large files the rowid is shorter and its size affects 
# the cost calculations. This causes the optimizer to choose loose index
# scan over normal index access.
 SELECT a FROM t1 USE INDEX FOR JOIN (i2) 
  USE INDEX FOR GROUP BY (i2) GROUP BY a;
 SELECT a FROM t1 FORCE INDEX FOR JOIN (i2) 
  FORCE INDEX FOR GROUP BY (i2) GROUP BY a;
 SELECT a FROM t1 USE INDEX () IGNORE INDEX (i2);
 SELECT a FROM t1 IGNORE INDEX (i2) USE INDEX ();

 SELECT a FROM t1 
  USE INDEX FOR GROUP BY (i2) 
  USE INDEX FOR ORDER BY (i2)
  USE INDEX FOR JOIN (i2);

 SELECT a FROM t1 
  USE INDEX FOR JOIN (i2) 
  USE INDEX FOR JOIN (i2) 
  USE INDEX FOR JOIN (i2,i2);

 SELECT 1 FROM t1 WHERE a IN
  (SELECT a FROM t1 USE INDEX (i2) IGNORE INDEX (i2));

CREATE TABLE t2 (a INT, b INT, KEY(a));
INSERT INTO t2 VALUES (1, 1), (2, 2), (3,3), (4,4);
 SELECT a, SUM(b) FROM t2 GROUP BY a LIMIT 2;
 SELECT a, SUM(b) FROM t2 IGNORE INDEX (a) GROUP BY a LIMIT 2;
# ANALYZE TABLE t2;
 SELECT 1 FROM t2 WHERE a IN
  (SELECT a FROM t1 USE INDEX (i2) IGNORE INDEX (i2));

SHOW VARIABLES LIKE 'old';

DROP TABLE t1, t2;

#
# Bug#30596: GROUP BY optimization gives wrong result order
#
CREATE TABLE t1(
  a INT, 
  b INT NOT NULL, 
  c INT NOT NULL, 
  d INT, 
  UNIQUE KEY (c,b)
);

INSERT INTO t1 VALUES (1,1,1,50), (1,2,3,40), (2,1,3,4);

CREATE TABLE t2(
  a INT,
  b INT,
  UNIQUE KEY(a,b)
);

INSERT INTO t2 VALUES (NULL, NULL), (NULL, NULL), (NULL, 1), (1, NULL), (1, 1), (1,2);
# ANALYZE TABLE t1,t2;

 SELECT c,b,d FROM t1 GROUP BY c,b,d;
SELECT c,b,d FROM t1 GROUP BY c,b,d;
 SELECT c,b,d FROM t1 GROUP BY c,b,d ORDER BY NULL;
SELECT c,b,d FROM t1 GROUP BY c,b,d ORDER BY NULL;
 SELECT c,b,d FROM t1 ORDER BY c,b,d;
SELECT c,b,d FROM t1 ORDER BY c,b,d;

 SELECT c,b,d FROM t1 GROUP BY c,b;
SELECT c,b,d FROM t1 GROUP BY c,b;
 SELECT c,b   FROM t1 GROUP BY c,b;
SELECT c,b   FROM t1 GROUP BY c,b;

 SELECT a,b from t2 ORDER BY a,b;
SELECT a,b from t2 ORDER BY a,b;
 SELECT a,b from t2 GROUP BY a,b;
SELECT a,b from t2 GROUP BY a,b;
 SELECT a from t2 GROUP BY a;
SELECT a from t2 GROUP BY a;
 SELECT b from t2 GROUP BY b;
SELECT b from t2 GROUP BY b;

DROP TABLE t1;
DROP TABLE t2;

#
# Bug #31797: error while parsing subqueries -- WHERE is parsed as HAVING
#
CREATE TABLE t1 ( a INT, b INT );

SELECT b c, (SELECT a FROM t1 WHERE b = c)
FROM t1;

SELECT b c, (SELECT a FROM t1 WHERE b = c)
FROM t1 
HAVING b = 10;


SET @old_sql_mode = @@sql_mode;
SET @@sql_mode='ONLY_FULL_GROUP_BY';

SELECT b c, (SELECT a FROM t1 WHERE b = c)
FROM t1;

SELECT b c, (SELECT a FROM t1 WHERE b = c)
FROM t1 
HAVING b = 10;


INSERT INTO t1 VALUES (1, 1);
SELECT b c, (SELECT a FROM t1 WHERE b = c)
FROM t1;

INSERT INTO t1 VALUES (2, 1);

DROP TABLE t1;
SET @@sql_mode = @old_sql_mode;


#
# Bug#42567 Invalid GROUP BY error
#

# Setup of the subtest
SET @old_sql_mode = @@sql_mode;
SET @@sql_mode='ONLY_FULL_GROUP_BY';

CREATE TABLE t1(i INT);
INSERT INTO t1 VALUES (1), (10);

# The actual test
SELECT COUNT(i) FROM t1;
SELECT COUNT(i) FROM t1 WHERE i > 1;

# Cleanup of subtest
DROP TABLE t1;
SET @@sql_mode = @old_sql_mode;


CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (4, 40), (1, 10), (2, 20), (2, 20), (3, 30);

SELECT (SELECT t1.a) aa, COUNT(DISTINCT b) FROM t1 GROUP BY aa;

SELECT (SELECT (SELECT t1.a)) aa, COUNT(DISTINCT b) FROM t1 GROUP BY aa;

set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

SELECT (SELECT t1.a) aa, COUNT(DISTINCT b) FROM t1 GROUP BY aa+0;

SELECT (SELECT t1.a) aa, COUNT(DISTINCT b) FROM t1 GROUP BY -aa;

# ANALYZE TABLE t1;

SELECT (SELECT t1.a) aa, COUNT(DISTINCT b) FROM t1 GROUP BY aa+0;


SELECT (SELECT t1.a) aa, COUNT(DISTINCT b) FROM t1 GROUP BY -aa;

set @@sql_mode=@previous_sql_mode_htnt542nh;

SELECT (SELECT tt.a FROM t1 tt LIMIT 1) aa, COUNT(DISTINCT b) FROM t1
  GROUP BY aa;

CREATE TABLE t2 SELECT DISTINCT a FROM t1;


SELECT (SELECT t2.a FROM t2 WHERE t2.a = t1.a) aa, b, COUNT(DISTINCT b)
  FROM t1 GROUP BY aa, b;
#skip SELECT (SELECT t2.a FROM t2 WHERE t2.a = t1.a) aa, b, COUNT(         b)
#skip  FROM t1 GROUP BY aa, b;


SELECT (SELECT t2.a FROM t2 WHERE t2.a = t1.a) aa, b, COUNT(DISTINCT b)
  FROM t1 GROUP BY aa, b ORDER BY -aa, -b;
SELECT (SELECT t2.a FROM t2 WHERE t2.a = t1.a) aa, b, COUNT(         b)
  FROM t1 GROUP BY aa, b ORDER BY -aa, -b;

DROP TABLE t1, t2;


CREATE TABLE t1 (a INT PRIMARY KEY);
CREATE TABLE t2 (a INT PRIMARY KEY);
INSERT INTO t2 VALUES (1), (2);
# ANALYZE TABLE t1,t2;
 SELECT MIN(t2.a) FROM t2 LEFT JOIN t1 ON t2.a = t1.a;
SELECT MIN(t2.a) FROM t2 LEFT JOIN t1 ON t2.a = t1.a;
 SELECT MAX(t2.a) FROM t2 LEFT JOIN t1 ON t2.a = t1.a;
SELECT MAX(t2.a) FROM t2 LEFT JOIN t1 ON t2.a = t1.a;
DROP TABLE t1, t2;



CREATE TABLE t1 (a text, b varchar(10));
INSERT INTO t1 VALUES (repeat('1', 1300),'one'), (repeat('1', 1300),'two');
# ANALYZE TABLE t1;
query_vertical  
SELECT SUBSTRING(a,1,10), LENGTH(a), GROUP_CONCAT(b) FROM t1 GROUP BY a;
SELECT SUBSTRING(a,1,10), LENGTH(a), GROUP_CONCAT(b) FROM t1 GROUP BY a;
query_vertical  
SELECT SUBSTRING(a,1,10), LENGTH(a) FROM t1 GROUP BY a;
SELECT SUBSTRING(a,1,10), LENGTH(a) FROM t1 GROUP BY a;
DROP TABLE t1;


CREATE TABLE t1(f1 INT NOT NULL);
INSERT INTO t1 VALUES (16777214),(0);

SELECT COUNT(*) FROM t1 LEFT JOIN t1 t2
ON 1 WHERE t2.f1 > 1 GROUP BY t2.f1;

DROP TABLE t1;



CREATE TABLE t1 (i int);
INSERT INTO t1 VALUES (1);

CREATE TABLE t2 (pk int PRIMARY KEY);
INSERT INTO t2 VALUES (10);

CREATE VIEW v1 AS SELECT t2.pk FROM t2;

SELECT v1.pk
FROM t1 LEFT JOIN v1 ON t1.i = v1.pk 
GROUP BY v1.pk;

DROP VIEW v1;
DROP TABLE t1,t2;


CREATE TABLE t1 (
  a INT,
  b INT,
  c INT,
  KEY (a, b)
);

INSERT INTO t1 VALUES
  ( 1, 1,  1 ),
  ( 1, 2,  2 ),
  ( 1, 3,  3 ),
  ( 1, 4,  6 ),
  ( 1, 5,  5 ),
  ( 1, 9, 13 ),

  ( 2, 1,  6 ),
  ( 2, 2,  7 ),
  ( 2, 3,  8 );

# ANALYZE TABLE t1;


SELECT a, AVG(t1.b),
(SELECT t11.c FROM t1 t11 WHERE t11.a = t1.a AND t11.b = AVG(t1.b)) AS t11c,
(SELECT t12.c FROM t1 t12 WHERE t12.a = t1.a AND t12.b = AVG(t1.b)) AS t12c
FROM t1 GROUP BY a;

SELECT a, AVG(t1.b),
(SELECT t11.c FROM t1 t11 WHERE t11.a = t1.a AND t11.b = AVG(t1.b)) AS t11c,
(SELECT t12.c FROM t1 t12 WHERE t12.a = t1.a AND t12.b = AVG(t1.b)) AS t12c
FROM t1 GROUP BY a;

DROP TABLE t1;


SET BIG_TABLES=1;
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (0),(0);
SELECT 1 FROM t1 GROUP BY TRIM(LEADING RAND() FROM '');
SELECT 1 FROM t1 GROUP BY SUBSTRING('',SLEEP(0),'');
SELECT 1 FROM t1 GROUP BY SUBSTRING(SYSDATE() FROM 'K' FOR 'jxW<');
DROP TABLE t1;
SET BIG_TABLES=0;


SET @save_sql_mode=@@sql_mode;
SET @@sql_mode='ONLY_FULL_GROUP_BY';

CREATE TABLE t1 (f1 int, f2 DATE);

INSERT INTO t1 VALUES (1,'2004-04-19'), (1,'0000-00-00'), (1,'2004-04-18'),
(2,'2004-05-19'), (2,'0001-01-01'), (3,'2004-04-10');

SELECT MIN(f2),MAX(f2) FROM t1;
SELECT f1,MIN(f2),MAX(f2) FROM t1 GROUP BY 1;

DROP TABLE t1;

CREATE TABLE t1 ( f1 int, f2 time);
INSERT INTO t1 VALUES (1,'01:27:35'), (1,'06:11:01'), (2,'19:53:05'),
(2,'21:44:25'), (3,'10:55:12'), (3,'05:45:11'), (4,'00:25:00');

SELECT MIN(f2),MAX(f2) FROM t1;
SELECT f1,MIN(f2),MAX(f2) FROM t1 GROUP BY 1;

DROP TABLE t1;

SET sql_mode=@save_sql_mode;


CREATE TABLE t1 (
  pk INT NOT NULL,
  col_int_nokey INT,
  PRIMARY KEY (pk)
);

INSERT INTO t1 VALUES (10,7);
INSERT INTO t1 VALUES (11,1);
INSERT INTO t1 VALUES (12,5);
INSERT INTO t1 VALUES (13,3);

## original query:

SELECT pk AS field1, col_int_nokey AS field2 
FROM t1 
WHERE col_int_nokey > 0
GROUP BY field1, field2;

## store query results in a new table:

CREATE TABLE where_subselect
  SELECT pk AS field1, col_int_nokey AS field2
  FROM t1
  WHERE col_int_nokey > 0
  GROUP BY field1, field2
;

## query the new table and compare to original using WHERE ... IN():

SELECT * 
FROM where_subselect
WHERE (field1, field2) IN (
  SELECT pk AS field1, col_int_nokey AS field2
  FROM t1
  WHERE col_int_nokey > 0
  GROUP BY field1, field2
);

DROP TABLE t1;
DROP TABLE where_subselect;


CREATE TABLE t1(a INT, KEY(a));
INSERT INTO t1 VALUES (0);
CREATE TABLE t2(b INT, KEY(b));
INSERT INTO t2 VALUES (0),(0);

#skip PREPARE stmt FROM '
#skip SELECT 1 FROM t2
#skip LEFT JOIN t1 ON NULL
#skip GROUP BY t2.b, t1.a
#skip HAVING a <> 2';
#skip EXECUTE stmt;
#skip EXECUTE stmt;
#skip
#skip DEALLOCATE PREPARE stmt;
DROP TABLE t1, t2;


 #

CREATE TABLE t1 (
pk INT, col_int_key INT,
col_varchar_key VARCHAR(1), col_varchar_nokey VARCHAR(1)
);
INSERT INTO t1 VALUES
(10,7,'v','v'),(11,0,'s','s'),(12,9,'l','l'),(13,3,'y','y'),(14,4,'c','c'),
(15,2,'i','i'),(16,5,'h','h'),(17,3,'q','q'),(18,1,'a','a'),(19,3,'v','v'),
(20,6,'u','u'),(21,7,'s','s'),(22,5,'y','y'),(23,1,'z','z'),(24,204,'h','h'),
(25,224,'p','p'),(26,9,'e','e'),(27,5,'i','i'),(28,0,'y','y'),(29,3,'w','w');

CREATE TABLE t2 (
pk INT, col_int_key INT,
col_varchar_key VARCHAR(1), col_varchar_nokey VARCHAR(1),
PRIMARY KEY (pk)
);
INSERT INTO t2 VALUES
(1,4,'b','b'),(2,8,'y','y'),(3,0,'p','p'),(4,0,'f','f'),(5,0,'p','p'),
(6,7,'d','d'),(7,7,'f','f'),(8,5,'j','j'),(9,3,'e','e'),(10,188,'u','u'),
(11,4,'v','v'),(12,9,'u','u'),(13,6,'i','i'),(14,1,'x','x'),(15,5,'l','l'),
(16,6,'q','q'),(17,2,'n','n'),(18,4,'r','r'),(19,231,'c','c'),(20,4,'h','h'),
(21,3,'k','k'),(22,3,'t','t'),(23,7,'t','t'),(24,6,'k','k'),(25,7,'g','g'),
(26,9,'z','z'),(27,4,'n','n'),(28,4,'j','j'),(29,2,'l','l'),(30,1,'d','d'),
(31,2,'t','t'),(32,194,'y','y'),(33,2,'i','i'),(34,3,'j','j'),(35,8,'r','r'),
(36,4,'b','b'),(37,9,'o','o'),(38,4,'k','k'),(39,5,'a','a'),(40,5,'f','f'),
(41,9,'t','t'),(42,3,'c','c'),(43,8,'c','c'),(44,0,'r','r'),(45,98,'k','k'),
(46,3,'l','l'),(47,1,'o','o'),(48,0,'t','t'),(49,189,'v','v'),(50,8,'x','x'),
(51,3,'j','j'),(52,3,'x','x'),(53,9,'k','k'),(54,6,'o','o'),(55,8,'z','z'),
(56,3,'n','n'),(57,9,'c','c'),(58,5,'d','d'),(59,9,'s','s'),(60,2,'j','j'),
(61,2,'w','w'),(62,5,'f','f'),(63,8,'p','p'),(64,6,'o','o'),(65,9,'f','f'),
(66,0,'x','x'),(67,3,'q','q'),(68,6,'g','g'),(69,5,'x','x'),(70,8,'p','p'),
(71,2,'q','q'),(72,120,'q','q'),(73,25,'v','v'),(74,1,'g','g'),(75,3,'l','l'),
(76,1,'w','w'),(77,3,'h','h'),(78,153,'c','c'),(79,5,'o','o'),(80,9,'o','o'),
(81,1,'v','v'),(82,8,'y','y'),(83,7,'d','d'),(84,6,'p','p'),(85,2,'z','z'),
(86,4,'t','t'),(87,7,'b','b'),(88,3,'y','y'),(89,8,'k','k'),(90,4,'c','c'),
(91,6,'z','z'),(92,1,'t','t'),(93,7,'o','o'),(94,1,'u','u'),(95,0,'t','t'),
(96,2,'k','k'),(97,7,'u','u'),(98,2,'b','b'),(99,1,'m','m'),(100,5,'o','o');

# ANALYZE TABLE t1,t2;

SELECT SUM(alias2.col_varchar_nokey) , alias2.pk AS field2 FROM t1 AS alias1
STRAIGHT_JOIN t2 AS alias2 ON alias2.pk = alias1.col_int_key WHERE alias1.pk
GROUP BY field2 ORDER BY alias1.col_int_key,alias2.pk ;

DROP TABLE t1,t2;


CREATE TABLE t1 (i int);
INSERT INTO t1 VALUES (1);

CREATE TABLE t2 (pk int PRIMARY KEY);
INSERT INTO t2 VALUES (10);

CREATE VIEW v1 AS SELECT t2.pk FROM t2;

SELECT v1.pk
FROM t1 LEFT JOIN v1 ON t1.i = v1.pk 
GROUP BY v1.pk;

DROP VIEW v1;
DROP TABLE t1,t2;



CREATE TABLE t1 (vc varchar(1), INDEX vc_idx (vc)) ;
INSERT INTO t1 VALUES (NULL), ('o'), (NULL), ('p'), ('c');

#skip FLUSH TABLE t1;

SELECT vc FROM t1 GROUP BY vc;

DROP TABLE t1;



CREATE TABLE t1 (col1 int, col2 int) ;
INSERT INTO t1 VALUES (10,1),(11,7);

CREATE TABLE t2 (col1 int, col2 int) ;
INSERT INTO t2 VALUES (10,8);

# ANALYZE TABLE t1,t2;


DROP TABLE t1,t2;


CREATE TABLE t1(
 col1 int, 
 INDEX idx (col1)
);

INSERT INTO t1 VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),
   (11),(12),(13),(14),(15),(16),(17),(18),(19),(20);

# ANALYZE TABLE t1;
#skip SELECT SQL_BIG_RESULT col1 AS field1, col1 AS field2
#skip           FROM t1 GROUP BY field1, field2;

# Needs to be range to exercise bug
FLUSH STATUS;
SHOW SESSION STATUS LIKE 'Sort_scan%';

CREATE VIEW v1 AS SELECT * FROM t1;

#skip SELECT SQL_BIG_RESULT col1 AS field1, col1 AS field2
#skip FROM v1
#skip GROUP BY field1, field2;

#skip SELECT SQL_BIG_RESULT tbl1.col1 AS field1, tbl2.col1 AS field2
#skip FROM t1 as tbl1, t1 as tbl2
#skip GROUP BY field1, field2
#skip ORDER BY field1, field2
#skip LIMIT 3;

DROP VIEW v1;
DROP TABLE t1;


CREATE TABLE it (
  pk INT NOT NULL,
  col_int_nokey INT NOT NULL,
  PRIMARY KEY (pk)
) ;

CREATE TABLE ot (
  pk int(11) NOT NULL,
  col_int_nokey int(11) NOT NULL,
  PRIMARY KEY (pk)
) ;
INSERT INTO ot VALUES (10,8);

set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

SELECT col_int_nokey, MAX( pk ) 
FROM ot 
WHERE (8, 1) IN ( SELECT pk, COUNT( col_int_nokey ) FROM it );

set @@sql_mode=@previous_sql_mode_htnt542nh;

DROP TABLE it,ot;

CREATE TABLE t1 (i INT) ;
INSERT INTO t1 VALUES (1);

CREATE TABLE t2 (j INT) ;
INSERT INTO t2 VALUES (1),(2);

set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

SELECT i, j, COUNT(i) FROM t1 JOIN t2 WHERE j=3;

set @@sql_mode=@previous_sql_mode_htnt542nh;

DROP TABLE t1,t2;


CREATE TABLE t1 (
  a varchar(1)
) ;

INSERT INTO t1 VALUES ('a'), ('b');

CREATE TABLE t2 (
  a varchar(1),
  b int(11)
) ;

INSERT INTO t2 VALUES ('a',1);

# ANALYZE TABLE t1,t2;


SELECT (SELECT MAX(b) FROM t2 WHERE t2.a != t1.a) as MAX 
FROM t1;


DROP TABLE t1,t2;



SET @old_sql_mode = @@sql_mode;
SET sql_mode='';

CREATE TABLE t1 (
  pk INT,
  col_int_key INT,
  col_int_nokey INT,
  col_varchar_key VARCHAR(10),
  col_varchar_nokey VARCHAR(10),
  KEY col_int_key (col_int_key),
  KEY col_varchar_key (col_varchar_key)
);
INSERT INTO t1 VALUES (), ();

SELECT alias1.col_int_nokey AS field1,
  (SELECT alias2.col_int_key
   FROM t1 AS alias2
   WHERE alias1.col_varchar_key <= alias1.col_varchar_nokey
  ) AS field2
FROM t1 AS alias1
GROUP BY field1, field2;

SELECT alias1.col_int_nokey AS field1,
  (SELECT alias2.col_int_key
   FROM t1 AS alias2
   WHERE alias1.col_varchar_key <= alias1.col_varchar_nokey
  ) AS field2
FROM t1 AS alias1
GROUP BY field1,
  (SELECT alias2.col_int_key
   FROM t1 AS alias2
   WHERE alias1.col_varchar_key <= alias1.col_varchar_nokey
  );

# ANALYZE TABLE t1;



SET @@sql_mode='ONLY_FULL_GROUP_BY';

SET @@sql_mode = @old_sql_mode;

CREATE TABLE t2(a INT);
INSERT INTO t2 VALUES(3),(4);
# ANALYZE TABLE t1,t2;
 SELECT
pk AS foo, col_int_key AS bar, (SELECT a FROM t2 WHERE a=t1.pk) AS baz
FROM t1
GROUP BY foo, col_int_key, baz ORDER BY pk, bar, (SELECT a FROM t2 WHERE a=t1.pk);

# Printing the alias in GROUP/ORDER BY would introduce an ambiguity.
 SELECT
pk AS foo, col_int_key AS foo, (SELECT a FROM t2 WHERE a=t1.pk) AS foo
FROM t1
GROUP BY pk, col_int_key, (SELECT a FROM t2 WHERE a=t1.pk)
ORDER BY pk, col_int_key, (SELECT a FROM t2 WHERE a=t1.pk);

DROP TABLE t1,t2;


# There was a bug with Item_direct_view_ref

CREATE TABLE t1 (  
  pk int(11) NOT NULL AUTO_INCREMENT,
  col_datetime_key datetime NOT NULL,
  col_varchar_key varchar(1) NOT NULL,
  PRIMARY KEY (pk),
  KEY col_datetime_key (col_datetime_key),
  KEY col_varchar_key (col_varchar_key)
);

CREATE TABLE t2 (  
  pk int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (pk)
);

CREATE TABLE t3 (  
  pk int(11) NOT NULL AUTO_INCREMENT,
  col_varchar_key varchar(1) NOT NULL,
  PRIMARY KEY (pk),
  KEY col_varchar_key (col_varchar_key)
);

CREATE VIEW view1 AS SELECT * FROM t1;
# ANALYZE TABLE t1,t2,t3;

SELECT
    alias1.col_datetime_key AS field1
FROM (
        view1 AS alias1,
        t3 AS alias2
    )
WHERE (
    (SELECT MIN(sq1_alias1.pk)
     FROM t2 AS sq1_alias1
    )
) OR (alias1.col_varchar_key = alias2.col_varchar_key
  AND alias1.col_varchar_key = 'j'
) AND alias1.pk IS NULL
GROUP BY
    field1;

DROP TABLE t1,t2,t3;
DROP VIEW view1;

# Another one with Item_direct_view_ref:

CREATE TABLE t1 (
  col_int_key int(11) DEFAULT NULL,
  col_varchar_key varchar(1) DEFAULT NULL,
  col_varchar_nokey varchar(1) DEFAULT NULL,
  KEY col_int_key (col_int_key),
  KEY col_varchar_key (col_varchar_key,col_int_key)
);

CREATE TABLE t2 (
  col_int_key int(11) DEFAULT NULL,
  col_varchar_key varchar(1) DEFAULT NULL,
  col_varchar_nokey varchar(1) DEFAULT NULL,
  KEY col_int_key (col_int_key),
  KEY col_varchar_key (col_varchar_key,col_int_key)
);

CREATE ALGORITHM=MERGE VIEW view1 AS
  SELECT CONCAT( table1.col_varchar_nokey , table2.col_varchar_key ) AS
field1
  FROM
    t2 AS table1 JOIN t1 AS table2
    ON table2.col_varchar_nokey = table1.col_varchar_key 
       AND
       table2.col_varchar_key >= table1.col_varchar_nokey 
ORDER BY field1
;
# ANALYZE TABLE t1,t2;
 SELECT * FROM view1;

DROP TABLE t1,t2;
DROP VIEW view1;

# And a bug with Item_singlerow_subselect:

CREATE TABLE t1 (col_varchar_nokey varchar(1) DEFAULT NULL);
INSERT INTO t1 VALUES ('v'),('c');
# ANALYZE TABLE t1;
 SELECT (SELECT 150) AS field5
FROM (SELECT * FROM t1) AS alias1
GROUP BY field5;

DROP TABLE t1;


SET @old_sql_mode = @@sql_mode;
SET @@sql_mode='ONLY_FULL_GROUP_BY';

create table t1(a int, b int);
select 1 from t1 group by b;
       
drop table t1;

# A query from BUG#12844977

CREATE TABLE t1 (pk int, i1 int,  v1 varchar(1), primary key (pk));
INSERT INTO t1 VALUES (0,2,'b'),(1,4,'a'),(2,0,'a'),(3,7,'b'),(4,7,'c');


SELECT a1.v1,a2.v1 FROM t1 AS a1 JOIN t1 AS a2 ON a2.pk = a1.i1 group by
a1.v1,a2.v1 ORDER BY             a2.v1 ASC;

DROP TABLE t1;

# A query from BUG#12699645

CREATE TABLE t1 (pk int(11) NOT NULL AUTO_INCREMENT, col_int_key int(11) NOT
NULL, col_varchar_key varchar(1) NOT NULL, col_varchar_nokey varchar(1) NOT
NULL, PRIMARY KEY (pk), KEY col_int_key (col_int_key), KEY col_varchar_key
(col_varchar_key,col_int_key));
CREATE TABLE t2 (pk int(11) NOT NULL AUTO_INCREMENT, col_int_key int(11) NOT
NULL, col_varchar_key varchar(1) NOT NULL, col_varchar_nokey varchar(1) NOT
NULL, PRIMARY KEY (pk), KEY col_int_key (col_int_key), KEY col_varchar_key
(col_varchar_key,col_int_key));

SELECT SUM(alias2.col_varchar_nokey) , alias2.pk AS field2 FROM t1 AS alias1
STRAIGHT_JOIN t2 AS alias2 ON alias2.pk = alias1.col_int_key WHERE alias1.pk
group by field2 ORDER BY alias1.col_int_key,alias2.pk ;

DROP TABLE t1,t2;

# A query from BUG#12626418

CREATE TABLE t1 (pk int(11) NOT NULL AUTO_INCREMENT, col_int_key int(11) NOT
NULL, col_datetime_key datetime NOT NULL, col_varchar_key varchar(1) NOT
NULL, col_varchar_nokey varchar(1) NOT NULL, PRIMARY KEY (pk), KEY
col_int_key (col_int_key), KEY col_datetime_key (col_datetime_key), KEY
col_varchar_key (col_varchar_key,col_int_key));
CREATE TABLE t2 (pk int(11) NOT NULL AUTO_INCREMENT, col_int_key int(11) NOT
NULL, col_datetime_key datetime NOT NULL, col_varchar_key varchar(1) NOT
NULL, col_varchar_nokey varchar(1) NOT NULL, PRIMARY KEY (pk), KEY
col_int_key (col_int_key), KEY col_datetime_key (col_datetime_key), KEY
col_varchar_key (col_varchar_key,col_int_key));


DROP TABLE t1,t2;

# Particular situations met while fixing the bug

create table t1 (a int, b int);
# A field for COUNT(*) will be inserted in all_fields, between
# 'fields' (which has the Item_func_gt) and elements of ORDER BY ('b').

create table t2 (a int, b int);
# The subquery in ORDER BY has an outer query's column, which means
# that the outer query's ORDER BY depends on a non-aggregated column,
# which itself is not in GROUP BY.

# From BUG#17282
drop table if exists t1;
create table t1 (branch varchar(40), id int);

set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

select count(*) from t1 group by branch having
branch<>'mumbai' order by id desc,branch desc limit 100;

select branch, count(*)/max(id) from t1 group by branch
having (branch<>'mumbai' OR count(*)<2)
order by id desc,branch desc limit 100;

set @@sql_mode=@previous_sql_mode_htnt542nh;

SET @@sql_mode='ONLY_FULL_GROUP_BY';



DROP TABLE t1;

# From BUG#8510

create table t1 (a int, b int);
insert into t1 values (1, 2), (1, 3), (null, null);

select sum(a), count(*) from t1 group by a;
select round(sum(a)), count(*) from t1 group by a;
select ifnull(a, 'xyz') from t1 group by a;

DROP TABLE t1;

SET @@sql_mode = @old_sql_mode;


CREATE TABLE t1 (
  a int,
  b varchar(1),
  KEY (b,a)
) charset utf8mb4;

INSERT INTO t1 VALUES (1,NULL),(0,'a'),(1,NULL),(0,'a');
INSERT INTO t1 VALUES (1,'a'),(0,'a'),(1,'a'),(0,'a');
# ANALYZE TABLE t1;

#skip  SELECT SQL_BUFFER_RESULT MIN(a), b FROM t1 WHERE t1.b = 'a' GROUP BY b;

 SELECT MIN(a), b FROM t1 WHERE t1.b = 'a' GROUP BY b;

DROP TABLE t1;


CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES (0);
#skip SELECT 1 FROM t1 WHERE 1 > ALL(SELECT 1 FROM t1 WHERE a);
DROP TABLE t1;



CREATE TABLE t1(a INTEGER);
INSERT INTO t1 VALUES (1), (2);

SELECT SUM(a) FROM t1 ORDER BY COUNT(*);

SELECT COUNT(*) FROM t1 ORDER BY COUNT(*);

SELECT COUNT(*) AS c FROM t1 ORDER BY COUNT(*);

SELECT COUNT(*) AS c FROM t1 ORDER BY c;

SELECT a, COUNT(*) FROM t1 GROUP BY a ORDER BY COUNT(*);

SELECT a, COUNT(*) AS c FROM t1 GROUP BY a ORDER BY COUNT(*);

SELECT a, COUNT(*) AS c FROM t1 GROUP BY a ORDER BY c;

SELECT a AS c FROM t1 GROUP BY a ORDER BY COUNT(*);

SELECT 1 FROM t1 HAVING COUNT(*) > 1 ORDER BY COUNT(*);

SELECT (SELECT 1 AS foo ORDER BY a) AS x
FROM t1;

SELECT (SELECT 1 AS foo ORDER BY t1.a) AS x
FROM t1;

SELECT (SELECT 1 AS foo ORDER BY COUNT(a)) AS x
FROM t1;

SELECT (SELECT 1 AS foo ORDER BY COUNT(t1.a)) AS x
FROM t1;



SELECT SUM(a) FROM t1 ORDER BY (SELECT COUNT(t1.a) FROM t1 AS t2);




DROP TABLE t1;


CREATE TABLE r(c BLOB) ;

INSERT INTO r VALUES('');

#skip SELECT 1 FROM r GROUP BY MAKE_SET(1,c) WITH ROLLUP;

DROP TABLE r;

SET @old_sql_mode = @@sql_mode;
set sql_mode='';

CREATE TABLE AA (
col_varchar_1024_latin1 varchar(1024)  CHARACTER SET latin1,
pk integer auto_increment,
col_varchar_1024_utf8_key varchar(1024)  CHARACTER SET utf8,
col_varchar_1024_latin1_key varchar(1024)  CHARACTER SET latin1,
col_varchar_10_utf8_key varchar(10)  CHARACTER SET utf8,
col_varchar_10_latin1_key varchar(10)  CHARACTER SET latin1,
col_int int,
col_varchar_10_latin1 varchar(10)  CHARACTER SET latin1,
col_varchar_10_utf8 varchar(10)  CHARACTER SET utf8,
col_varchar_1024_utf8 varchar(1024)  CHARACTER SET utf8,
col_int_key int,
primary key (pk),
key (col_varchar_1024_utf8_key ),
key (col_varchar_1024_latin1_key ),
key (col_varchar_10_utf8_key ),
key (col_varchar_10_latin1_key ),
key (col_int_key ))  ROW_FORMAT=DYNAMIC;

CREATE OR REPLACE VIEW view_AA AS SELECT * FROM AA;

CREATE TABLE B (
col_varchar_1024_latin1_key varchar(1024)  CHARACTER SET latin1,
col_varchar_10_latin1 varchar(10)  CHARACTER SET latin1,
col_varchar_10_utf8_key varchar(10)  CHARACTER SET utf8,
col_int_key int,
col_varchar_1024_latin1 varchar(1024)  CHARACTER SET latin1,
col_varchar_1024_utf8_key varchar(1024)  CHARACTER SET utf8,
col_varchar_10_utf8 varchar(10)  CHARACTER SET utf8,
col_int int,
pk integer auto_increment,
col_varchar_10_latin1_key varchar(10)  CHARACTER SET latin1,
col_varchar_1024_utf8 varchar(1024)  CHARACTER SET utf8,
key (col_varchar_1024_latin1_key ),
key (col_varchar_10_utf8_key ),
key (col_int_key ),
key (col_varchar_1024_utf8_key ),
primary key (pk),
key (col_varchar_10_latin1_key )) ;

# Data too long for column 'col_varchar_10_latin1' at row 1
#skip INSERT INTO B VALUES  ('at', repeat('a',1000), 'the',
#skip -1622540288, 'as', repeat('a',1000), 'want', 1810890752, NULL, 'v', 'just');

# error : groub_by.view_AA not exists. could not reproduce manually 
#skip SELECT
#skip DISTINCT table1 . pk AS field1
#skip FROM  view_AA AS table1  LEFT  JOIN B AS table2
#skip ON  table1 . col_varchar_10_latin1_key =  table2 .
#skip col_varchar_1024_latin1_key
#skip WHERE ( ( table2 . pk > table1 . col_int_key AND table1 . pk NOT
#skip BETWEEN 3 AND ( 3 + 3 ) ) AND table2 . pk <> 6 )
#skip GROUP BY table1 . pk;

DROP TABLE AA,B;
DROP VIEW if exists view_AA;

SET @@sql_mode = @old_sql_mode;

#skip SET sql_mode = default;


CREATE TABLE t1(a INT, b INT) ;
INSERT INTO t1 VALUES (1,2), (3,4);

SELECT
  EXISTS
  (
    SELECT 1
    FROM (SELECT a FROM t1) t_inner
    GROUP BY t_inner.a
    ORDER BY MIN(t_outer.b)
  )
FROM t1 t_outer;

DROP TABLE t1;


CREATE TABLE t1(cc CHAR(1), n CHAR(1), d CHAR(1));

CREATE OR REPLACE ALGORITHM = MERGE VIEW v1 AS
 SELECT * FROM t1 WHERE cc = 'AUS' ORDER BY n;

SELECT d, COUNT(*) FROM v1 GROUP BY d;

DROP TABLE t1;
DROP VIEW v1;


CREATE TABLE t0 ( a INT );
INSERT INTO t0 VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);

CREATE TABLE t1 (
  pk INT NOT NULL AUTO_INCREMENT,
  a INT,
  b INT,
  PRIMARY KEY (pk),
  KEY idx1 (a),
  KEY idx2 (b, a),
  KEY idx3 (a, b)
) ENGINE = InnoDB;

INSERT INTO t1 (a, b) SELECT t01.a, t02.a FROM t0 t01, t0 t02;

# ANALYZE TABLE t0,t1;

let $query=
SELECT DISTINCT a, MAX(b) FROM t1 WHERE a >= 0 GROUP BY a,a;

eval  $query;
eval $query;

DROP TABLE t0, t1;


CREATE TABLE t1(
 a INTEGER,
 b BLOB,
 c BLOB,
 PRIMARY KEY(a,b(1)),
 UNIQUE KEY (a,c(1))
);

INSERT INTO t1 VALUES(1,2,1),(2,4,1);
# ANALYZE TABLE t1;

SELECT a, (SELECT SUM(a + c) FROM (SELECT b as c FROM t1) AS v1) FROM t1;


DROP TABLE t1;


CREATE TABLE cc (pk int,  i int, c varchar(1),
                 PRIMARY KEY (pk, i), KEY c_key(c)) ;

SELECT c, i, pk FROM cc WHERE (cc.pk = 1)  GROUP BY c, i, pk;

DROP TABLE cc;


CREATE TABLE t1
(
  a INT GENERATED ALWAYS AS (1) VIRTUAL,
  b INT GENERATED ALWAYS AS (a) VIRTUAL,
  c INT GENERATED ALWAYS AS (1) VIRTUAL
);

# Quoted this query out for bug#25228698
#--error ER_WRONG_FIELD_WITH_GROUP
#SELECT a.b FROM t1 AS a
#RIGHT JOIN t1 AS b ON 1
#INNER JOIN t1 AS c ON 1
#WHERE b.b = c.b
#GROUP BY c.c;

DROP TABLE t1;

 #
 # Bug #22186926 CONVERT_CONSTANT_ITEM(THD*, ITEM_FIELD*, ITEM**): ASSERTION `!RESULT' FAILED.
 #

CREATE TABLE t1
(
  f1 INTEGER NOT NULL,
  f2 DATETIME NOT NULL,
  f3 VARCHAR(1) NOT NULL,
  KEY (f3)
);

INSERT INTO t1(f1, f2, f3) VALUES
(5, '2001-07-25 08:40:24.058646', 'j'),
(2, '1900-01-01 00:00:00', 's'),
(4, '2001-01-20 12:47:23.022022', 'x');

drop table if exists t2;

CREATE TABLE t2 (f1 VARCHAR(1) NOT NULL);

#skip FLUSH TABLES;
# ANALYZE TABLE t1,t2;
 SELECT MIN(t1.f3 ) FROM t1
WHERE t1.f3 IN (SELECT t2.f1 FROM t2 WHERE NOT t1.f2 IS NOT NULL) AND t1.f1 IS NULL OR
  NOT t1 . f3 < 'q';


DROP TABLE t1,t2;

 #
 # Bug#22275357 ORDER BY DOES NOT WORK CORRECTLY WITH GROUPED AVG()
 #              VALUES EXTRACTED FROM JSON
 #

# The bug was only seen when grouping on a BLOB-based column type
# (such as TEXT and JSON), and using an aggregate function based on
# Item_sum_num_field class (AVG, VAR_*, STDEV_*), and the grouping
# operation used a temporary table.

CREATE TABLE t(txt TEXT, i INT);
INSERT INTO t VALUES ('a', 2), ('b', 8), ('b', 0), ('c', 2);
SELECT txt, AVG(i) a FROM t GROUP BY txt ORDER BY a, txt;
SELECT txt, VAR_POP(i) v FROM t GROUP BY txt ORDER BY v, txt;
SELECT txt, STDDEV_POP(i) s FROM t GROUP BY txt ORDER BY s, txt;
# SQL_BUFFER_RESULT forces the use of a temporary table in the
# grouping operation, in case that strategy is not chosen in the
# queries above.
#skip SELECT SQL_BUFFER_RESULT txt, AVG(i) a FROM t GROUP BY txt ORDER BY a, txt;
#skip SELECT SQL_BUFFER_RESULT txt, VAR_POP(i) v FROM t GROUP BY txt ORDER BY v, txt;
#skip SELECT SQL_BUFFER_RESULT txt, STDDEV_POP(i) s FROM t
#skip GROUP BY txt ORDER BY s, txt;
DROP TABLE t;

 #
 # Bug#26162009: INCORRECT RESULT WITH EXPRESSION IN HAVING CLAUSE
 #
CREATE TABLE t1 (col_varchar VARCHAR(10), col_int_key INT);
INSERT INTO t1 VALUES('r',83);
SELECT col_varchar as field1, MAX(col_int_key) AS field3 FROM t1
GROUP BY col_varchar HAVING (field1 >= 'i' OR field3 <= 9);
SELECT CONCAT(col_varchar) as field1, MAX(col_int_key) AS field3
FROM t1 GROUP BY col_varchar HAVING (field1 >= 'i' OR field3 <= 9);
DROP TABLE t1;

 #
 # Bug#21974346: GROUPING ON AGGREGATED RESULTS NOT ALWAYS REJECTED
 #

CREATE TABLE t (a INT);
INSERT INTO t VALUES (0), (1), (1), (2);

 # These queries did not raise the expected error before the fix.


 # These queries were accepted before the fix, and they still are.

SELECT COUNT(*) AS c FROM t ORDER BY (SELECT 1 HAVING c);
SELECT COUNT(*) AS c FROM t ORDER BY c;
SELECT COUNT(*) AS c FROM t ORDER BY c+1;
SELECT COUNT(*) AS c FROM t ORDER BY c+c;
SELECT COUNT(*) AS c FROM t HAVING (SELECT 1 HAVING c);
SELECT COUNT(*) AS c FROM t HAVING c;
#skip SELECT a, COUNT(*) AS c FROM t GROUP BY a WITH ROLLUP
#skip HAVING (SELECT 1 HAVING c);
#skip SELECT a, COUNT(*) AS c FROM t GROUP BY a WITH ROLLUP HAVING c;
SELECT (SELECT COUNT(*) AS c FROM t HAVING c <> 0);
SELECT (SELECT COUNT(*) FROM t HAVING COUNT(*) <> 0);
SELECT (SELECT COUNT(*) AS c FROM t ORDER BY c);
SELECT (SELECT COUNT(*) FROM t ORDER BY COUNT(*));
SELECT 1 FROM t t1 HAVING (SELECT SUM(t1.a) s FROM t t2
                                  GROUP BY (SELECT 1 HAVING s > 0)) > 0;
SELECT (SELECT SUM(a)) FROM t;
SELECT SUM(a) AS s, (SELECT SUM(a)) FROM t;
SELECT a, (SELECT SUM(a)) s FROM t GROUP BY a;
SELECT 1 FROM t t1 HAVING (SELECT SUM(t1.a) s FROM t t2 HAVING s > 5);
SELECT (SELECT SUM(t1.a) s FROM t t2 WHERE t2.a = 0 HAVING s > 3) FROM t t1;
SELECT 1 FROM t HAVING (SELECT SUM(a)) > 0;
SELECT (SELECT SUM(a)) FROM t;

 # Bug #22588319: OUTER REFERENCE TO AGGREGATE INCORRECTLY 0 OR NULL IN SUBQUERY
SELECT SUM(a) AS s, (SELECT 1 HAVING s) FROM t;
SELECT SUM(a) AS s, (SELECT 1 HAVING s IS NULL) FROM t;
SELECT COUNT(a) AS c, (SELECT 1 HAVING c) FROM t;
SELECT COUNT(a) AS c, (SELECT 1 HAVING c = 0) FROM t;

 # Shows that #22588319 isn't fixed for ORDER BY.
 # Should have ordered ascending on -a, but comes out in random order
 # because the ORDER BY clause always evaluates to NULL. Have to use
 # the  directive to produce stable test results.

SELECT a, COUNT(*) c FROM t GROUP BY a ORDER BY (SELECT -a HAVING c > 0);

 # These queries were accepted in the default sql_mode before the fix,
 # and rejected in the ANSI sql_mode. Expect no change after the fix.

SELECT * FROM t t1 WHERE (SELECT SUM(t1.a) s FROM t t2 HAVING s = 0);
SELECT 1 FROM t t1 GROUP BY (SELECT SUM(t1.a) s FROM t t2 ORDER BY s);
SELECT 1 FROM t t1 GROUP BY (SELECT SUM(t1.a) s FROM t t2 ORDER BY s + 1);
#skip SELECT 1 FROM t t1 GROUP BY (SELECT SUM(t1.a) s);
#skip SELECT 1 FROM t WHERE (SELECT SUM(a)) > 0;
#skip SELECT 1 FROM t GROUP BY (SELECT SUM(a));
SET sql_mode = ANSI;

 # These queries were rejected before the fix, and they still are.


DROP TABLE t;

 #
 # Bug#25407964 GROUP BY DESC GIVES WRONG RESULT WHEN GROUPS ON DECIMAL AND SEES A NULL
 #

CREATE TABLE t(d DATE, i INT);
INSERT INTO t VALUES(NULL,1),('2017-01-14',3);
SELECT WEEK(d)/10, GROUP_CONCAT(i) FROM t GROUP BY WEEK(d)/10;
SELECT WEEK(d)/10, GROUP_CONCAT(i) FROM t GROUP BY WEEK(d)/10 ORDER BY WEEK(d)/10 DESC;
DROP TABLE t;

 #
 # Bug#21974696 WRONG RESULT WHEN GROUPING ON VALUE FROM SUBQUERY
 #              AND USING COUNT DISTINCT
 #

# The bug was seen with BLOB-based types, such as TEXT and JSON. Test both.
set @previous_sql_mode_htnt542nh=@@sql_mode;
set sql_mode=(select replace(@@sql_mode,'ONLY_FULL_GROUP_BY',''));
# Verify that we get streaming.

set @@sql_mode=@previous_sql_mode_htnt542nh;

 #
 # WL#8963: REMOVAL OF NON STANDARD GROUP BY ASC/DESC
 #

CREATE TABLE t1 (i INTEGER NOT NULL, j INTEGER NOT NULL, key(i,j));
INSERT INTO t1 VALUES (1,2),(1,4),(1,3),(2,5),(5,3),(2,6),(6,2);

#Check for syntax errors

#Should use the index
 SELECT i, SUM(j) FROM t1 GROUP BY i;
SELECT i, SUM(j) FROM t1 GROUP BY i;

#Should use the index - order by in this case will be moved to group by
 SELECT i, SUM(j) FROM t1 GROUP BY i ORDER BY i;
SELECT i, SUM(j) FROM t1 GROUP BY i ORDER BY i;

#Should use index for group by and filesort for order by
 SELECT i, SUM(j) FROM t1 GROUP BY i ORDER BY SUM(j);
SELECT i, SUM(j) FROM t1 GROUP BY i ORDER BY SUM(j);

ALTER TABLE t1 ADD UNIQUE INDEX (i,j);

#Test for code which removed group by when it is on unique columns
 SELECT i FROM t1 GROUP BY j,i ORDER BY i,j;
SELECT i, SUM(j) FROM t1 GROUP BY j,i ORDER BY i,j;

DROP TABLE t1;

 # End of tests for WL#8693

 #
 # Bug #29214970: WRONG RESULTS FOR GROUP EXPRESSIONS WITH THE ITERATOR EXECUTOR
 #

CREATE TABLE t1 (
	f1 INTEGER,
	f2 INTEGER,
	KEY k1 ( f1 )
);

INSERT INTO t1 VALUES ( 1, 1 );
INSERT INTO t1 VALUES ( 1, 2 );
INSERT INTO t1 VALUES ( 1, 3 );
INSERT INTO t1 VALUES ( 2, 1 );
INSERT INTO t1 VALUES ( 2, 2 );
INSERT INTO t1 VALUES ( 3, 5 );

# ANALYZE TABLE t1;

#
# The COUNT(DISTINCT ...) is to force the optimizer to use running aggregation on
# using the f1 index, instead of aggregating into a temporary table (which doesn't
# expose the bug). Other ways to do the same would include ROLLUP. Output the
# plan to make sure it doesn't change in a way that would mask the bug.
#
SELECT f1, f1 + 1, COUNT(DISTINCT f2) AS x FROM t1 GROUP BY f1 ORDER BY x;

DROP TABLE t1;

 # Bug#29240516: Count on nullable expression may return wrong result

CREATE TABLE t1 (
  vc varchar(255) DEFAULT NULL,
  b tinyint DEFAULT NULL
);

INSERT INTO t1 (vc, b) VALUES (1, true), (2, false), (3, true), (4, false);
INSERT INTO t1 (vc) VALUES (5), (6), (7), (8), (9), (10);

SELECT COUNT(b), COUNT(*)
FROM t1;

SELECT COUNT(b)
FROM t1
HAVING COUNT(1) > 0;

DROP TABLE t1;

 # Bug#28857990: Different result for COUNT with EXISTS subquery

CREATE TABLE d (pk INT PRIMARY KEY);
INSERT INTO d VALUES (1),(2),(3),(4),(5);

CREATE TABLE c (col_varchar VARCHAR(1));
INSERT INTO c VALUES ('a'),('b'),('c'),('d'),('e');

SELECT COUNT(pk) FROM d WHERE EXISTS (SELECT col_varchar FROM c);

DROP TABLE c, d;

 #
 # Bug #29396628: SIG 6 AT LIST<ITEM>::END | SQL_LIST.H
 #

#
# This bug is not related to ROLLUP per se, and can probably be triggered
# without it, but ROLLUP processing happens to check the validity of the
# linked list representing all the fields, so it's the simplest way to
# trigger the bug.
#
CREATE TABLE t1 (
  f1 integer,
  f2 integer,
  f3 integer
);
DROP TABLE t1;

 # Bug#23599127 Unexpected unknown column error without ONLY_FULL_GROUP_BY

SET SQL_MODE = '';

CREATE TABLE t1 (
  id_aams int NOT NULL ,
  PRIMARY KEY (id_aams)
);

CREATE TABLE t2 (
  id int NOT NULL,
  id_game int DEFAULT NULL,
  code_id char(11) DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY codeid (code_id,id_game)
);

select count(distinct x.id_aams)
from (select *
      from (select t1.id_aams, t2.*
            from t1 left join t2
                 on t2.code_id='G0000000012' and
                    t1.id_aams=t2.id_game
            where t1.id_aams=1715000360
            order by t2.id desc
           ) as g
      group by g.id_aams
      having g.id is null
     ) as x;

DELIMITER //;

DELIMITER ;//


DROP TABLE t1, t2;

#skip SET SQL_MODE = DEFAULT;

 # Bug#31562881: Crash in change_to_use_tmp_fields_except_sums

CREATE TABLE w(a INTEGER);
INSERT INTO w VALUES (1),(2),(3),(4);

 #
 # Bug #32179240: ADDING ROLLUP BREAKS GROUP LABELS
 #

drop table if exists t1;
CREATE TABLE t1 (a DOUBLE);
INSERT INTO t1 ( a ) VALUES ( 0.1 );
SELECT TRUNCATE(a, 1) FROM t1 GROUP BY TRUNCATE(a, 1) ;
DROP TABLE t1;

 #
 # Bug#32193123: DIFFERENT RESULTSET WITH HYPERGRAPH_OPTIMIZER SWITCH ENABLED
 #
CREATE TABLE t1 (a INTEGER, b VARCHAR(1));
INSERT INTO t1 VALUES (1, 'x');
SELECT SUM(t1.a) AS field1, CONCAT(d1.b) AS field2
FROM (SELECT * FROM t1) AS d1, t1
GROUP BY field2 HAVING field2 > '' AND field1 < 4;
DROP TABLE t1;

 #
 # Bug #32234709: TEMPTABLEAGGREGATEITERATOR::INIT(): ASSERTION `!THD()->IS_ERROR()' FAILED.
 #

CREATE TABLE t1 (
  a INTEGER,
  e INTEGER
);

INSERT INTO t1 VALUES (1,0);
INSERT INTO t1 VALUES (1,8388607);


DROP TABLE t1;

 #
 # Bug #32244407: ASSERTION FAILURE IN `!THD()->IS_ERROR()' AT AGGREGATEITERATOR::READ()
 #

CREATE TABLE t1 (
  a INTEGER,
  b VARCHAR(1)
);
CREATE INDEX i1 ON t1 (b);

INSERT INTO t1 VALUES (1,'0');
INSERT INTO t1 VALUES (1,'y');
INSERT INTO t1 VALUES (1,'Q');
INSERT INTO t1 VALUES (1,'H');
INSERT INTO t1 VALUES (1,'j');
INSERT INTO t1 VALUES (1,'a');
INSERT INTO t1 VALUES (1,'b');
INSERT INTO t1 VALUES (1,'j');
INSERT INTO t1 VALUES (1,'q');
INSERT INTO t1 VALUES (1,'e');


DROP TABLE t1;

 #
 # Bug #32335256: COUNT(*) RETURNS NULL IN NESTED QUERY
 #

CREATE TABLE t1 (
  f1 INTEGER
);

SELECT
  (
    SELECT COUNT(*) +
      (
        SELECT COUNT(*)
        FROM t1
        WHERE f1 = c.f2
      )
    FROM t1
  )
  FROM (SELECT 555 AS f2) AS c;

DROP TABLE t1;

 #
 # Bug#32248291: ENABLE THE HYPERGRAPH OPTIMIZER FOR SQL_BUFFER_RESULT
 #
 # Verify that expressions in the SELECT list are evaluated only once
 # per row.
 #
CREATE TABLE t(x INTEGER);
INSERT INTO t VALUES (1), (2), (3);
# The hypergraph optimizer streams the results through a temporary
# table when a query has both GROUP BY and ORDER BY. It used to
# evaluate RAND(1) twice per row when copying the expressions in the
# SELECT list into the temporary table, and it therefore returned
# different results than the old optimizer, which evaluated RAND(1)
# once per row. Now they both evaluate it once per row and should
# produce the same results.
SELECT RAND(1) r, COUNT(*) FROM t GROUP BY x ORDER BY r;
DROP TABLE t;

 #
 # Bug #32598902: WL#14325: ASSERTION `RECEIVER.HASSECONDARYENGINECOSTHOOK()' FAILED|JOIN_OPTIMIZE
 #

CREATE TABLE t1 (
  a INTEGER,
  b INTEGER
);

SELECT t1.b
FROM t1, t1 AS t2
WHERE t1.a = t1.b AND t1.a = t2.b
GROUP BY t1.b
ORDER BY t2.b;

DROP TABLE t1;

 # Bug#32717969: Wrong result of execute prepare on 'smallint'

CREATE TABLE t1(
  c1 smallint NOT NULL
);
INSERT INTO t1 VALUES(32767),(14742),(14743);
SELECT COUNT(*), SUM(c1), AVG(c1), MIN(c1), MAX(c1) FROM t1 WHERE c1 > 32767;
#skip PREPARE stmt from
#skip 'SELECT COUNT(*), SUM(c1), AVG(c1), MIN(c1), MAX(c1) FROM t1 WHERE c1 > ?';
SET @a=14742;
#skip EXECUTE stmt USING @a;
set @a=32767;
#skip EXECUTE stmt USING @a;
SELECT BIT_AND(c1), BIT_OR(c1), BIT_XOR(c1) FROM t1 WHERE c1 > 32767;
#skip PREPARE stmt from
#skip 'SELECT BIT_AND(c1), BIT_OR(c1), BIT_XOR(c1) FROM t1 WHERE c1 > ?';
SET @a=14742;
#skip EXECUTE stmt USING @a;
set @a=32767;
#skip EXECUTE stmt USING @a;
SELECT GROUP_CONCAT(c1), JSON_ARRAYAGG(c1), JSON_OBJECTAGG('key', c1)
FROM t1
WHERE c1 > 32767;
#skip PREPARE stmt from
#skip "SELECT GROUP_CONCAT(c1), JSON_ARRAYAGG(c1), JSON_OBJECTAGG('key', c1)
#skip  FROM t1
#skip  WHERE c1 > ?";
SET @a=14742;
#skip EXECUTE stmt USING @a;
set @a=32767;
#skip EXECUTE stmt USING @a;
SELECT STDDEV_POP(c1), STDDEV_SAMP(c1), VAR_POP(c1), VAR_SAMP(c1)
FROM t1
WHERE c1 > 32767;
#skip PREPARE stmt from
#skip 'SELECT STDDEV_POP(c1), STDDEV_SAMP(c1), VAR_POP(c1), VAR_SAMP(c1)
#skip  FROM t1
#skip  WHERE c1 > ?';
SET @a=14742;
#skip EXECUTE stmt USING @a;
set @a=32767;
#skip EXECUTE stmt USING @a;
DROP TABLE t1;

 #
 # Verify that ROLLUP and DISTINCT on nullable GROUP BY expressions
 # work as expected (the sort is not elided).
 #

CREATE TABLE t1 (a INTEGER);
INSERT INTO t1 VALUES (NULL), (1), (2);


#skip SELECT DISTINCT a, COUNT(*) FROM t1 GROUP BY a WITH ROLLUP;

DROP TABLE t1;

 #
 # Bug #33007298: RECENT REGRESSION: CRASH IN QEP_SHARED_OWNER::TABLE
 #


 #
 # Bug#31894023 THE RESULTS OF AGGREGATION ON BIT TYPE ARE INCONSISTENT WHEN JOIN TYPE DIFFERS
 #

CREATE TABLE t1(id INT, b1 BIT, b9 BIT(9), b64 BIT(64));
INSERT INTO t1 VALUES
(1, b'0', b'000000000', b'0000000000000000000000000000000000000000000000000000000000000000'),
(2, b'1', b'100000000', b'1000000000000000000000000000000000000000000000000000000000000000');
CREATE INDEX i1 ON t1(id);
# ANALYZE TABLE t1;

SELECT HEX(CONCAT(MIN(b1))), HEX(CONCAT(MIN(b9))), HEX(CONCAT(MIN(b64))) FROM t1 GROUP BY id;
SELECT HEX(CONCAT(MIN(b1))), HEX(CONCAT(MIN(b9))), HEX(CONCAT(MIN(b64))) FROM t1 IGNORE INDEX(i1) GROUP BY id;

DROP TABLE t1;

 #
 # Bug#33515752: Data insertion exception in version 8.0.27
 #

CREATE TABLE t1(f1 INTEGER);
INSERT INTO t1 VALUES(1);

#skip SELECT SQL_BUFFER_RESULT MAX(f1)+1, 1 AS f2  FROM t1 GROUP BY f2;

DROP TABLE t1;

 #
 # Bug #33603911: Incorrect result with aggregation by temporary table
 #

CREATE TABLE t1 ( a INTEGER, b VARCHAR(1) );
INSERT INTO t1 VALUES (3, 'Q'), (4, '5');
drop table if exists t2;
CREATE TABLE t2 ( a INTEGER );
INSERT INTO t2 VALUES (3), (4);

SELECT
  t2d.a,
  SUM(t1.b) AS field2
FROM
  t1
  JOIN ( SELECT * FROM t2 ) AS t2d ON t1.a = t2d.a
GROUP BY t2d.a
HAVING t2d.a <> 3 OR field2 < 5;

DROP TABLE t1, t2;

 #
 # Bug#33738447:
 # Assertion `!(used_tabs & (~ read_tables & ~filter_for_table))' failed.
 #

CREATE TABLE t (i INTEGER, blobfield LONGTEXT);
INSERT INTO t VALUES (1, '');

#skip PREPARE ps FROM '
#skip SELECT d.i, COUNT(*)
#skip FROM t, LATERAL (SELECT i, blobfield) AS d
#skip GROUP BY d.i
#skip HAVING d.i < 100
#skip ORDER BY d.i
#skip ';

# The second execution used to get an assert failure with the
# hypergraph optimizer.
#skip EXECUTE ps;
#skip EXECUTE ps;

#skip DEALLOCATE PREPARE ps;
DROP TABLE t;

 #
 # Bug#33674441: Wrong result with outer join and streaming aggregation
 #

CREATE TABLE t1 (a INTEGER PRIMARY KEY, b INTEGER);
INSERT INTO t1 VALUES (1, 2), (2, 1), (3, 1);

CREATE TABLE t2 (a INTEGER, b INTEGER, KEY (b));
INSERT INTO t2 VALUES (1, 11);

CREATE TABLE t3 (a INTEGER PRIMARY KEY, b INTEGER);
INSERT INTO t3 VALUES (1, 10), (2, 11), (3, 0), (4, 0), (5, 0), (6, 0);


SELECT t1.a, MAX(t2.a)
FROM t1 LEFT JOIN (t2 JOIN t3 ON t2.b = t3.b) ON t1.b = t3.a
GROUP BY t1.a;

# The old optimizer has a separate code path for streaming aggregation when
# SQL_BUFFER_RESULT is specified. Verify that both code paths are fixed.

#skip SELECT SQL_BUFFER_RESULT t1.a, MAX(t2.a)
#skip FROM t1 LEFT JOIN (t2 JOIN t3 ON t2.b = t3.b) ON t1.b = t3.a
#skip GROUP BY t1.a;

DROP TABLE t1, t2, t3;

 #
 # Bug #33621358: Hypergraph: Assertion `!null_value || is_nullable()'
 #                failed
 #

CREATE TABLE t1 (f1 INTEGER, PRIMARY KEY(f1));

# This query used to get an assert failure for hypergraph optimizer.
# The old optimizer will not process the window function because it
# has a special code path for implicitly grouped queries. However
# the hypergraph optimizer does because the resolver is only marking
# the query as unordered but not removing the order by list when
# window functions are present.
SELECT SUM(t1.f1)
FROM t1 JOIN t1 AS t2
        ON t1.f1 = t2.f1
ORDER BY RANK() OVER(), CAST(t1.f1 AS UNSIGNED);

DROP TABLE t1;
